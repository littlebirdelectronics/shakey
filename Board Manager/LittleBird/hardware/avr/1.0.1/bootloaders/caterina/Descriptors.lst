   1               		.file	"Descriptors.c"
   2               	__SREG__ = 0x3f
   3               	__SP_H__ = 0x3e
   4               	__SP_L__ = 0x3d
   5               	__CCP__ = 0x34
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
   8               		.global __do_copy_data
   9               		.global __do_clear_bss
  10               		.text
  11               	.Ltext0:
  12               		.cfi_sections	.debug_frame
  13               		.section	.text.CALLBACK_USB_GetDescriptor,"ax",@progbits
  14               	.global	CALLBACK_USB_GetDescriptor
  16               	CALLBACK_USB_GetDescriptor:
  17               	.LFB94:
  18               		.file 1 "Descriptors.c"
   1:Descriptors.c **** /*
   2:Descriptors.c ****              LUFA Library
   3:Descriptors.c ****      Copyright (C) Dean Camera, 2011.
   4:Descriptors.c **** 
   5:Descriptors.c ****   dean [at] fourwalledcubicle [dot] com
   6:Descriptors.c ****            www.lufa-lib.org
   7:Descriptors.c **** */
   8:Descriptors.c **** 
   9:Descriptors.c **** /*
  10:Descriptors.c ****   Copyright 2011  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  11:Descriptors.c **** 
  12:Descriptors.c ****   Permission to use, copy, modify, distribute, and sell this
  13:Descriptors.c ****   software and its documentation for any purpose is hereby granted
  14:Descriptors.c ****   without fee, provided that the above copyright notice appear in
  15:Descriptors.c ****   all copies and that both that the copyright notice and this
  16:Descriptors.c ****   permission notice and warranty disclaimer appear in supporting
  17:Descriptors.c ****   documentation, and that the name of the author not be used in
  18:Descriptors.c ****   advertising or publicity pertaining to distribution of the
  19:Descriptors.c ****   software without specific, written prior permission.
  20:Descriptors.c **** 
  21:Descriptors.c ****   The author disclaim all warranties with regard to this
  22:Descriptors.c ****   software, including all implied warranties of merchantability
  23:Descriptors.c ****   and fitness.  In no event shall the author be liable for any
  24:Descriptors.c ****   special, indirect or consequential damages or any damages
  25:Descriptors.c ****   whatsoever resulting from loss of use, data or profits, whether
  26:Descriptors.c ****   in an action of contract, negligence or other tortious action,
  27:Descriptors.c ****   arising out of or in connection with the use or performance of
  28:Descriptors.c ****   this software.
  29:Descriptors.c **** */
  30:Descriptors.c **** 
  31:Descriptors.c **** /** \file
  32:Descriptors.c ****  *
  33:Descriptors.c ****  *  USB Device Descriptors, for library use when in USB device mode. Descriptors are special
  34:Descriptors.c ****  *  computer-readable structures which the host requests upon device enumeration, to determine
  35:Descriptors.c ****  *  the device's capabilities and functions.
  36:Descriptors.c ****  */
  37:Descriptors.c **** 
  38:Descriptors.c **** #include "Descriptors.h"
  39:Descriptors.c **** 
  40:Descriptors.c **** /** Device descriptor structure. This descriptor, located in SRAM memory, describes the overall
  41:Descriptors.c ****  *  device characteristics, including the supported USB version, control endpoint size and the
  42:Descriptors.c ****  *  number of device configurations. The descriptor is read out by the USB host when the enumeratio
  43:Descriptors.c ****  *  process begins.
  44:Descriptors.c ****  */
  45:Descriptors.c **** const USB_Descriptor_Device_t DeviceDescriptor =
  46:Descriptors.c **** {
  47:Descriptors.c **** 	.Header                 = {.Size = sizeof(USB_Descriptor_Device_t), .Type = DTYPE_Device},
  48:Descriptors.c **** 
  49:Descriptors.c **** 	.USBSpecification       = VERSION_BCD(01.10),
  50:Descriptors.c **** 	.Class                  = CDC_CSCP_CDCClass,
  51:Descriptors.c **** 	.SubClass               = CDC_CSCP_NoSpecificSubclass,
  52:Descriptors.c **** 	.Protocol               = CDC_CSCP_NoSpecificProtocol,
  53:Descriptors.c **** 
  54:Descriptors.c **** 	.Endpoint0Size          = FIXED_CONTROL_ENDPOINT_SIZE,
  55:Descriptors.c **** 
  56:Descriptors.c **** 	.VendorID               = DEVICE_VID,
  57:Descriptors.c **** 	.ProductID              = DEVICE_PID,
  58:Descriptors.c **** 	.ReleaseNumber          = VERSION_BCD(00.01),
  59:Descriptors.c **** 
  60:Descriptors.c **** 	.ManufacturerStrIndex   = 0x02,
  61:Descriptors.c **** 	.ProductStrIndex        = 0x01,
  62:Descriptors.c **** 	.SerialNumStrIndex      = NO_DESCRIPTOR,
  63:Descriptors.c **** 
  64:Descriptors.c **** 	.NumberOfConfigurations = FIXED_NUM_CONFIGURATIONS
  65:Descriptors.c **** };
  66:Descriptors.c **** 
  67:Descriptors.c **** /** Configuration descriptor structure. This descriptor, located in SRAM memory, describes the usag
  68:Descriptors.c ****  *  of the device in one of its supported configurations, including information about any device in
  69:Descriptors.c ****  *  and endpoints. The descriptor is read out by the USB host during the enumeration process when s
  70:Descriptors.c ****  *  a configuration so that the host may correctly communicate with the USB device.
  71:Descriptors.c ****  */
  72:Descriptors.c **** const USB_Descriptor_Configuration_t ConfigurationDescriptor =
  73:Descriptors.c **** {
  74:Descriptors.c **** 	.Config =
  75:Descriptors.c **** 		{
  76:Descriptors.c **** 			.Header                 = {.Size = sizeof(USB_Descriptor_Configuration_Header_t), .Type = DTYPE_
  77:Descriptors.c **** 
  78:Descriptors.c **** 			.TotalConfigurationSize = sizeof(USB_Descriptor_Configuration_t),
  79:Descriptors.c **** 			.TotalInterfaces        = 2,
  80:Descriptors.c **** 
  81:Descriptors.c **** 			.ConfigurationNumber    = 1,
  82:Descriptors.c **** 			.ConfigurationStrIndex  = NO_DESCRIPTOR,
  83:Descriptors.c **** 
  84:Descriptors.c **** 			.ConfigAttributes       = USB_CONFIG_ATTR_BUSPOWERED,
  85:Descriptors.c **** 
  86:Descriptors.c **** 			.MaxPowerConsumption    = USB_CONFIG_POWER_MA(100)
  87:Descriptors.c **** 		},
  88:Descriptors.c **** 
  89:Descriptors.c **** 	.CDC_CCI_Interface =
  90:Descriptors.c **** 		{
  91:Descriptors.c **** 			.Header                 = {.Size = sizeof(USB_Descriptor_Interface_t), .Type = DTYPE_Interface},
  92:Descriptors.c **** 
  93:Descriptors.c **** 			.InterfaceNumber        = 0,
  94:Descriptors.c **** 			.AlternateSetting       = 0,
  95:Descriptors.c **** 
  96:Descriptors.c **** 			.TotalEndpoints         = 1,
  97:Descriptors.c **** 
  98:Descriptors.c **** 			.Class                  = CDC_CSCP_CDCClass,
  99:Descriptors.c **** 			.SubClass               = CDC_CSCP_ACMSubclass,
 100:Descriptors.c **** 			.Protocol               = CDC_CSCP_ATCommandProtocol,
 101:Descriptors.c **** 
 102:Descriptors.c **** 			.InterfaceStrIndex      = NO_DESCRIPTOR
 103:Descriptors.c **** 		},
 104:Descriptors.c **** 
 105:Descriptors.c **** 	.CDC_Functional_Header =
 106:Descriptors.c **** 		{
 107:Descriptors.c **** 			.Header                 = {.Size = sizeof(USB_CDC_Descriptor_FunctionalHeader_t), .Type = DTYPE_
 108:Descriptors.c **** 			.Subtype                = 0x00,
 109:Descriptors.c **** 
 110:Descriptors.c **** 			.CDCSpecification       = VERSION_BCD(01.10),
 111:Descriptors.c **** 		},
 112:Descriptors.c **** 
 113:Descriptors.c **** 	.CDC_Functional_ACM =
 114:Descriptors.c **** 		{
 115:Descriptors.c **** 			.Header                 = {.Size = sizeof(USB_CDC_Descriptor_FunctionalACM_t), .Type = DTYPE_CSI
 116:Descriptors.c **** 			.Subtype                = 0x02,
 117:Descriptors.c **** 
 118:Descriptors.c **** 			.Capabilities           = 0x04,
 119:Descriptors.c **** 		},
 120:Descriptors.c **** 
 121:Descriptors.c **** 	.CDC_Functional_Union =
 122:Descriptors.c **** 		{
 123:Descriptors.c **** 			.Header                 = {.Size = sizeof(USB_CDC_Descriptor_FunctionalUnion_t), .Type = DTYPE_C
 124:Descriptors.c **** 			.Subtype                = 0x06,
 125:Descriptors.c **** 
 126:Descriptors.c **** 			.MasterInterfaceNumber  = 0,
 127:Descriptors.c **** 			.SlaveInterfaceNumber   = 1,
 128:Descriptors.c **** 		},
 129:Descriptors.c **** 
 130:Descriptors.c **** 	.CDC_NotificationEndpoint =
 131:Descriptors.c **** 		{
 132:Descriptors.c **** 			.Header                 = {.Size = sizeof(USB_Descriptor_Endpoint_t), .Type = DTYPE_Endpoint},
 133:Descriptors.c **** 
 134:Descriptors.c **** 			.EndpointAddress        = (ENDPOINT_DIR_IN | CDC_NOTIFICATION_EPNUM),
 135:Descriptors.c **** 			.Attributes             = (EP_TYPE_INTERRUPT | ENDPOINT_ATTR_NO_SYNC | ENDPOINT_USAGE_DATA),
 136:Descriptors.c **** 			.EndpointSize           = CDC_NOTIFICATION_EPSIZE,
 137:Descriptors.c **** 			.PollingIntervalMS      = 0xFF
 138:Descriptors.c **** 		},
 139:Descriptors.c **** 
 140:Descriptors.c **** 	.CDC_DCI_Interface =
 141:Descriptors.c **** 		{
 142:Descriptors.c **** 			.Header                 = {.Size = sizeof(USB_Descriptor_Interface_t), .Type = DTYPE_Interface},
 143:Descriptors.c **** 
 144:Descriptors.c **** 			.InterfaceNumber        = 1,
 145:Descriptors.c **** 			.AlternateSetting       = 0,
 146:Descriptors.c **** 
 147:Descriptors.c **** 			.TotalEndpoints         = 2,
 148:Descriptors.c **** 
 149:Descriptors.c **** 			.Class                  = CDC_CSCP_CDCDataClass,
 150:Descriptors.c **** 			.SubClass               = CDC_CSCP_NoDataSubclass,
 151:Descriptors.c **** 			.Protocol               = CDC_CSCP_NoDataProtocol,
 152:Descriptors.c **** 
 153:Descriptors.c **** 			.InterfaceStrIndex      = NO_DESCRIPTOR
 154:Descriptors.c **** 		},
 155:Descriptors.c **** 
 156:Descriptors.c **** 	.CDC_DataOutEndpoint =
 157:Descriptors.c **** 		{
 158:Descriptors.c **** 			.Header                 = {.Size = sizeof(USB_Descriptor_Endpoint_t), .Type = DTYPE_Endpoint},
 159:Descriptors.c **** 
 160:Descriptors.c **** 			.EndpointAddress        = (ENDPOINT_DIR_OUT | CDC_RX_EPNUM),
 161:Descriptors.c **** 			.Attributes             = (EP_TYPE_BULK | ENDPOINT_ATTR_NO_SYNC | ENDPOINT_USAGE_DATA),
 162:Descriptors.c **** 			.EndpointSize           = CDC_TXRX_EPSIZE,
 163:Descriptors.c **** 			.PollingIntervalMS      = 0x01
 164:Descriptors.c **** 		},
 165:Descriptors.c **** 
 166:Descriptors.c **** 	.CDC_DataInEndpoint =
 167:Descriptors.c **** 		{
 168:Descriptors.c **** 			.Header                 = {.Size = sizeof(USB_Descriptor_Endpoint_t), .Type = DTYPE_Endpoint},
 169:Descriptors.c **** 
 170:Descriptors.c **** 			.EndpointAddress        = (ENDPOINT_DIR_IN | CDC_TX_EPNUM),
 171:Descriptors.c **** 			.Attributes             = (EP_TYPE_BULK | ENDPOINT_ATTR_NO_SYNC | ENDPOINT_USAGE_DATA),
 172:Descriptors.c **** 			.EndpointSize           = CDC_TXRX_EPSIZE,
 173:Descriptors.c **** 			.PollingIntervalMS      = 0x01
 174:Descriptors.c **** 		}
 175:Descriptors.c **** };
 176:Descriptors.c **** 
 177:Descriptors.c **** /** Language descriptor structure. This descriptor, located in SRAM memory, is returned when the ho
 178:Descriptors.c ****  *  the string descriptor with index 0 (the first index). It is actually an array of 16-bit integer
 179:Descriptors.c ****  *  via the language ID table available at USB.org what languages the device supports for its strin
 180:Descriptors.c ****  */
 181:Descriptors.c **** const USB_Descriptor_String_t LanguageString =
 182:Descriptors.c **** {
 183:Descriptors.c **** 	.Header                 = {.Size = USB_STRING_LEN(1), .Type = DTYPE_String},
 184:Descriptors.c **** 
 185:Descriptors.c **** 	.UnicodeString          = {LANGUAGE_ID_ENG}
 186:Descriptors.c **** };
 187:Descriptors.c **** 
 188:Descriptors.c **** /** Product descriptor string. This is a Unicode string containing the product's details in human r
 189:Descriptors.c ****  *  and is read out upon request by the host when the appropriate string ID is requested, listed in
 190:Descriptors.c ****  *  Descriptor.
 191:Descriptors.c ****  */
 192:Descriptors.c **** const USB_Descriptor_String_t ProductString =
 193:Descriptors.c **** {
 194:Descriptors.c **** 	.Header                 = {.Size = USB_STRING_LEN(14), .Type = DTYPE_String},
 195:Descriptors.c **** 
 196:Descriptors.c **** 	#if DEVICE_PID == 0x9209
 197:Descriptors.c **** 	.UnicodeString          = L"WiFlyin'      "
 198:Descriptors.c **** 	#elif DEVICE_PID == 0x9207
 199:Descriptors.c **** 	.UnicodeString          = L"LilyPadUSB    " 
 200:Descriptors.c **** 	#elif DEVICE_PID == 0x9205
 201:Descriptors.c **** 	.UnicodeString          = L"Pro Micro 5V  " 
 202:Descriptors.c **** 	#elif DEVICE_PID == 0x9203
 203:Descriptors.c **** 	.UnicodeString			= L"Pro Micro 3.3V"
 204:Descriptors.c **** 	#elif DEVICE_PID == 0x2B74
 205:Descriptors.c **** 	.UnicodeString			= L"MaKey MaKey   "
 206:Descriptors.c **** 	#else
 207:Descriptors.c **** 	.UnicodeString			= L"USB IO board  "
 208:Descriptors.c **** 	#endif
 209:Descriptors.c **** };
 210:Descriptors.c **** 
 211:Descriptors.c **** const USB_Descriptor_String_t ManufNameString = 
 212:Descriptors.c **** {
 213:Descriptors.c **** 	.Header					= {.Size = USB_STRING_LEN(20), .Type = DTYPE_String},
 214:Descriptors.c **** 	
 215:Descriptors.c **** 	#if DEVICE_VID == 0x1B4F
 216:Descriptors.c **** 	.UnicodeString			= L"SparkFun Electronics"
 217:Descriptors.c **** 	#else
 218:Descriptors.c **** 	.UnicodeString			= L"Unknown             "
 219:Descriptors.c **** 	#endif
 220:Descriptors.c **** };
 221:Descriptors.c **** 
 222:Descriptors.c **** /** This function is called by the library when in device mode, and must be overridden (see LUFA li
 223:Descriptors.c ****  *  documentation) by the application code so that the address and size of a requested descriptor c
 224:Descriptors.c ****  *  to the USB library. When the device receives a Get Descriptor request on the control endpoint, 
 225:Descriptors.c ****  *  is called so that the descriptor details can be passed back and the appropriate descriptor sent
 226:Descriptors.c ****  *  USB host.
 227:Descriptors.c ****  */
 228:Descriptors.c **** uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
 229:Descriptors.c ****                                     const uint8_t wIndex,
 230:Descriptors.c ****                                     const void** const DescriptorAddress)
 231:Descriptors.c **** {
  19               		.loc 1 231 0
  20               		.cfi_startproc
  21               	.LVL0:
  22               	/* prologue: function */
  23               	/* frame size = 0 */
  24               	/* stack size = 0 */
  25               	.L__stack_usage = 0
 232:Descriptors.c **** 	const uint8_t  DescriptorType   = (wValue >> 8);
 233:Descriptors.c **** 	const uint8_t  DescriptorNumber = (wValue & 0xFF);
 234:Descriptors.c **** 
 235:Descriptors.c **** 	const void* Address = NULL;
 236:Descriptors.c **** 	uint16_t    Size    = NO_DESCRIPTOR;
 237:Descriptors.c **** 
 238:Descriptors.c **** 	switch (DescriptorType)
  26               		.loc 1 238 0
  27 0000 9230      		cpi r25,lo8(2)
  28 0002 01F0      		breq .L4
  29 0004 9330      		cpi r25,lo8(3)
  30 0006 01F0      		breq .L5
  31 0008 9130      		cpi r25,lo8(1)
  32 000a 01F4      		brne .L10
  33 000c 00C0      		rjmp .L6
  34               	.L4:
  35               	.LVL1:
 239:Descriptors.c **** 	{
 240:Descriptors.c **** 		case DTYPE_Device:
 241:Descriptors.c **** 			Address = &DeviceDescriptor;
 242:Descriptors.c **** 			Size    = sizeof(USB_Descriptor_Device_t);
 243:Descriptors.c **** 			break;
 244:Descriptors.c **** 		case DTYPE_Configuration:
 245:Descriptors.c **** 			Address = &ConfigurationDescriptor;
 246:Descriptors.c **** 			Size    = sizeof(USB_Descriptor_Configuration_t);
  36               		.loc 1 246 0
  37 000e 8EE3      		ldi r24,lo8(62)
  38 0010 90E0      		ldi r25,hi8(62)
  39               	.LVL2:
 245:Descriptors.c **** 			Address = &ConfigurationDescriptor;
  40               		.loc 1 245 0
  41 0012 20E0      		ldi r18,lo8(ConfigurationDescriptor)
  42 0014 30E0      		ldi r19,hi8(ConfigurationDescriptor)
 247:Descriptors.c **** 			break;
  43               		.loc 1 247 0
  44 0016 00C0      		rjmp .L3
  45               	.LVL3:
  46               	.L5:
 248:Descriptors.c **** 		case DTYPE_String:
 249:Descriptors.c **** 			if (!(DescriptorNumber))
  47               		.loc 1 249 0
  48 0018 8823      		tst r24
  49 001a 01F0      		breq .L7
 250:Descriptors.c **** 			{
 251:Descriptors.c **** 				Address = &LanguageString;
 252:Descriptors.c **** 				Size    = LanguageString.Header.Size;
 253:Descriptors.c **** 			}
 254:Descriptors.c **** 			else if (DescriptorNumber == DeviceDescriptor.ProductStrIndex) 
  50               		.loc 1 254 0
  51 001c 8130      		cpi r24,lo8(1)
  52 001e 01F0      		breq .L8
 255:Descriptors.c **** 			{
 256:Descriptors.c **** 				Address = &ProductString;
 257:Descriptors.c **** 				Size    = ProductString.Header.Size;
 258:Descriptors.c **** 			} else if (DescriptorNumber == DeviceDescriptor.ManufacturerStrIndex)
  53               		.loc 1 258 0
  54 0020 8230      		cpi r24,lo8(2)
  55 0022 01F0      		breq .L9
  56               	.L10:
 236:Descriptors.c **** 	uint16_t    Size    = NO_DESCRIPTOR;
  57               		.loc 1 236 0
  58 0024 80E0      		ldi r24,lo8(0)
  59 0026 90E0      		ldi r25,hi8(0)
  60               	.LVL4:
 235:Descriptors.c **** 	const void* Address = NULL;
  61               		.loc 1 235 0
  62 0028 20E0      		ldi r18,lo8(0)
  63 002a 30E0      		ldi r19,hi8(0)
  64 002c 00C0      		rjmp .L3
  65               	.LVL5:
  66               	.L6:
 242:Descriptors.c **** 			Size    = sizeof(USB_Descriptor_Device_t);
  67               		.loc 1 242 0
  68 002e 82E1      		ldi r24,lo8(18)
  69 0030 90E0      		ldi r25,hi8(18)
  70               	.LVL6:
 241:Descriptors.c **** 			Address = &DeviceDescriptor;
  71               		.loc 1 241 0
  72 0032 20E0      		ldi r18,lo8(DeviceDescriptor)
  73 0034 30E0      		ldi r19,hi8(DeviceDescriptor)
  74 0036 00C0      		rjmp .L3
  75               	.LVL7:
  76               	.L7:
 252:Descriptors.c **** 				Size    = LanguageString.Header.Size;
  77               		.loc 1 252 0
  78 0038 84E0      		ldi r24,lo8(4)
  79 003a 90E0      		ldi r25,hi8(4)
  80               	.LVL8:
 251:Descriptors.c **** 				Address = &LanguageString;
  81               		.loc 1 251 0
  82 003c 20E0      		ldi r18,lo8(LanguageString)
  83 003e 30E0      		ldi r19,hi8(LanguageString)
  84 0040 00C0      		rjmp .L3
  85               	.LVL9:
  86               	.L8:
 257:Descriptors.c **** 				Size    = ProductString.Header.Size;
  87               		.loc 1 257 0
  88 0042 8EE1      		ldi r24,lo8(30)
  89 0044 90E0      		ldi r25,hi8(30)
  90               	.LVL10:
 256:Descriptors.c **** 				Address = &ProductString;
  91               		.loc 1 256 0
  92 0046 20E0      		ldi r18,lo8(ProductString)
  93 0048 30E0      		ldi r19,hi8(ProductString)
  94 004a 00C0      		rjmp .L3
  95               	.LVL11:
  96               	.L9:
 259:Descriptors.c **** 			{
 260:Descriptors.c **** 				Address = &ManufNameString;
 261:Descriptors.c **** 				Size	= ManufNameString.Header.Size;
  97               		.loc 1 261 0
  98 004c 8AE2      		ldi r24,lo8(42)
  99 004e 90E0      		ldi r25,hi8(42)
 100               	.LVL12:
 260:Descriptors.c **** 				Address = &ManufNameString;
 101               		.loc 1 260 0
 102 0050 20E0      		ldi r18,lo8(ManufNameString)
 103 0052 30E0      		ldi r19,hi8(ManufNameString)
 104               	.LVL13:
 105               	.L3:
 262:Descriptors.c **** 			}
 263:Descriptors.c **** 
 264:Descriptors.c **** 			break;
 265:Descriptors.c **** 	}
 266:Descriptors.c **** 
 267:Descriptors.c **** 	*DescriptorAddress = Address;
 106               		.loc 1 267 0
 107 0054 FA01      		movw r30,r20
 108 0056 3183      		std Z+1,r19
 109 0058 2083      		st Z,r18
 110               	/* epilogue start */
 268:Descriptors.c **** 	return Size;
 269:Descriptors.c **** }
 111               		.loc 1 269 0
 112 005a 0895      		ret
 113               		.cfi_endproc
 114               	.LFE94:
 116               	.global	ManufNameString
 117               		.data
 120               	ManufNameString:
 121 0000 2A        		.byte	42
 122 0001 03        		.byte	3
 123 0002 5300      		.string	"S"
 124 0004 7000      		.string	"p"
 125 0006 6100      		.string	"a"
 126 0008 7200      		.string	"r"
 127 000a 6B00      		.string	"k"
 128 000c 4600      		.string	"F"
 129 000e 7500      		.string	"u"
 130 0010 6E00      		.string	"n"
 131 0012 2000      		.string	" "
 132 0014 4500      		.string	"E"
 133 0016 6C00      		.string	"l"
 134 0018 6500      		.string	"e"
 135 001a 6300      		.string	"c"
 136 001c 7400      		.string	"t"
 137 001e 7200      		.string	"r"
 138 0020 6F00      		.string	"o"
 139 0022 6E00      		.string	"n"
 140 0024 6900      		.string	"i"
 141 0026 6300      		.string	"c"
 142 0028 7300      		.string	"s"
 143 002a 00        		.string	""
 144 002b 00        		.string	""
 145               	.global	ProductString
 148               	ProductString:
 149 002c 1E        		.byte	30
 150 002d 03        		.byte	3
 151 002e 4D00      		.string	"M"
 152 0030 6100      		.string	"a"
 153 0032 4B00      		.string	"K"
 154 0034 6500      		.string	"e"
 155 0036 7900      		.string	"y"
 156 0038 2000      		.string	" "
 157 003a 4D00      		.string	"M"
 158 003c 6100      		.string	"a"
 159 003e 4B00      		.string	"K"
 160 0040 6500      		.string	"e"
 161 0042 7900      		.string	"y"
 162 0044 2000      		.string	" "
 163 0046 2000      		.string	" "
 164 0048 2000      		.string	" "
 165 004a 00        		.string	""
 166 004b 00        		.string	""
 167               	.global	LanguageString
 170               	LanguageString:
 171 004c 04        		.byte	4
 172 004d 03        		.byte	3
 173 004e 0904      		.word	1033
 174               	.global	ConfigurationDescriptor
 177               	ConfigurationDescriptor:
 178 0050 09        		.byte	9
 179 0051 02        		.byte	2
 180 0052 3E00      		.word	62
 181 0054 02        		.byte	2
 182 0055 01        		.byte	1
 183 0056 00        		.byte	0
 184 0057 80        		.byte	-128
 185 0058 32        		.byte	50
 186 0059 09        		.byte	9
 187 005a 04        		.byte	4
 188 005b 00        		.byte	0
 189 005c 00        		.byte	0
 190 005d 01        		.byte	1
 191 005e 02        		.byte	2
 192 005f 02        		.byte	2
 193 0060 01        		.byte	1
 194 0061 00        		.byte	0
 195 0062 05        		.byte	5
 196 0063 24        		.byte	36
 197 0064 00        		.byte	0
 198 0065 1001      		.word	272
 199 0067 04        		.byte	4
 200 0068 24        		.byte	36
 201 0069 02        		.byte	2
 202 006a 04        		.byte	4
 203 006b 05        		.byte	5
 204 006c 24        		.byte	36
 205 006d 06        		.byte	6
 206 006e 00        		.byte	0
 207 006f 01        		.byte	1
 208 0070 07        		.byte	7
 209 0071 05        		.byte	5
 210 0072 82        		.byte	-126
 211 0073 03        		.byte	3
 212 0074 0800      		.word	8
 213 0076 FF        		.byte	-1
 214 0077 09        		.byte	9
 215 0078 04        		.byte	4
 216 0079 01        		.byte	1
 217 007a 00        		.byte	0
 218 007b 02        		.byte	2
 219 007c 0A        		.byte	10
 220 007d 00        		.byte	0
 221 007e 00        		.byte	0
 222 007f 00        		.byte	0
 223 0080 07        		.byte	7
 224 0081 05        		.byte	5
 225 0082 04        		.byte	4
 226 0083 02        		.byte	2
 227 0084 1000      		.word	16
 228 0086 01        		.byte	1
 229 0087 07        		.byte	7
 230 0088 05        		.byte	5
 231 0089 83        		.byte	-125
 232 008a 02        		.byte	2
 233 008b 1000      		.word	16
 234 008d 01        		.byte	1
 235               	.global	DeviceDescriptor
 238               	DeviceDescriptor:
 239 008e 12        		.byte	18
 240 008f 01        		.byte	1
 241 0090 1001      		.word	272
 242 0092 02        		.byte	2
 243 0093 00        		.byte	0
 244 0094 00        		.byte	0
 245 0095 08        		.byte	8
 246 0096 4F1B      		.word	6991
 247 0098 742B      		.word	11124
 248 009a 0100      		.word	1
 249 009c 02        		.byte	2
 250 009d 01        		.byte	1
 251 009e 00        		.byte	0
 252 009f 01        		.byte	1
 253               		.text
 254               	.Letext0:
 255               		.file 2 "c:\\program files (x86)\\atmel\\avr tools\\avr toolchain\\bin\\../lib/gcc/avr/4.6.2/../..
 256               		.file 3 "c:\\program files (x86)\\atmel\\avr tools\\avr toolchain\\bin\\../lib/gcc/avr/4.6.2/inclu
 257               		.file 4 "../../../../../../../../../../OneDrive/LittleBird/Reference/LUFA/LUFA-111009/LUFA/Drivers
 258               		.file 5 "../../../../../../../../../../OneDrive/LittleBird/Reference/LUFA/LUFA-111009/LUFA/Drivers
 259               		.file 6 "Descriptors.h"
DEFINED SYMBOLS
                            *ABS*:00000000 Descriptors.c
C:\cygwin\tmp\ccOptufN.s:2      *ABS*:0000003f __SREG__
C:\cygwin\tmp\ccOptufN.s:3      *ABS*:0000003e __SP_H__
C:\cygwin\tmp\ccOptufN.s:4      *ABS*:0000003d __SP_L__
C:\cygwin\tmp\ccOptufN.s:5      *ABS*:00000034 __CCP__
C:\cygwin\tmp\ccOptufN.s:6      *ABS*:00000000 __tmp_reg__
C:\cygwin\tmp\ccOptufN.s:7      *ABS*:00000001 __zero_reg__
C:\cygwin\tmp\ccOptufN.s:16     .text.CALLBACK_USB_GetDescriptor:00000000 CALLBACK_USB_GetDescriptor
C:\cygwin\tmp\ccOptufN.s:177    .data:00000050 ConfigurationDescriptor
C:\cygwin\tmp\ccOptufN.s:238    .data:0000008e DeviceDescriptor
C:\cygwin\tmp\ccOptufN.s:170    .data:0000004c LanguageString
C:\cygwin\tmp\ccOptufN.s:148    .data:0000002c ProductString
C:\cygwin\tmp\ccOptufN.s:120    .data:00000000 ManufNameString

UNDEFINED SYMBOLS
__do_copy_data
__do_clear_bss
