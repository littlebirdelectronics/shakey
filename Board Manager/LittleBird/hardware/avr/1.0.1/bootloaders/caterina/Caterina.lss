
Caterina.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000b4  00800100  00007f0e  00000fa2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000f0e  00007000  00007000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000019  008001b4  008001b4  00001056  2**0
                  ALLOC
  3 .stab         00000954  00000000  00000000  00001058  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000001af  00000000  00000000  000019ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000328  00000000  00000000  00001b60  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004be8  00000000  00000000  00001e88  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000117a  00000000  00000000  00006a70  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000326f  00000000  00000000  00007bea  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000009ec  00000000  00000000  0000ae5c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002538  00000000  00000000  0000b848  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000037bd  00000000  00000000  0000dd80  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000004b8  00000000  00000000  0001153d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00007000 <__vectors>:
    7000:	55 c0       	rjmp	.+170    	; 0x70ac <__ctors_end>
    7002:	00 00       	nop
    7004:	6e c0       	rjmp	.+220    	; 0x70e2 <__bad_interrupt>
    7006:	00 00       	nop
    7008:	6c c0       	rjmp	.+216    	; 0x70e2 <__bad_interrupt>
    700a:	00 00       	nop
    700c:	6a c0       	rjmp	.+212    	; 0x70e2 <__bad_interrupt>
    700e:	00 00       	nop
    7010:	68 c0       	rjmp	.+208    	; 0x70e2 <__bad_interrupt>
    7012:	00 00       	nop
    7014:	66 c0       	rjmp	.+204    	; 0x70e2 <__bad_interrupt>
    7016:	00 00       	nop
    7018:	64 c0       	rjmp	.+200    	; 0x70e2 <__bad_interrupt>
    701a:	00 00       	nop
    701c:	62 c0       	rjmp	.+196    	; 0x70e2 <__bad_interrupt>
    701e:	00 00       	nop
    7020:	60 c0       	rjmp	.+192    	; 0x70e2 <__bad_interrupt>
    7022:	00 00       	nop
    7024:	5e c0       	rjmp	.+188    	; 0x70e2 <__bad_interrupt>
    7026:	00 00       	nop
    7028:	e0 c4       	rjmp	.+2496   	; 0x79ea <__vector_10>
    702a:	00 00       	nop
    702c:	5a c0       	rjmp	.+180    	; 0x70e2 <__bad_interrupt>
    702e:	00 00       	nop
    7030:	58 c0       	rjmp	.+176    	; 0x70e2 <__bad_interrupt>
    7032:	00 00       	nop
    7034:	56 c0       	rjmp	.+172    	; 0x70e2 <__bad_interrupt>
    7036:	00 00       	nop
    7038:	54 c0       	rjmp	.+168    	; 0x70e2 <__bad_interrupt>
    703a:	00 00       	nop
    703c:	52 c0       	rjmp	.+164    	; 0x70e2 <__bad_interrupt>
    703e:	00 00       	nop
    7040:	50 c0       	rjmp	.+160    	; 0x70e2 <__bad_interrupt>
    7042:	00 00       	nop
    7044:	95 c0       	rjmp	.+298    	; 0x7170 <__vector_17>
    7046:	00 00       	nop
    7048:	4c c0       	rjmp	.+152    	; 0x70e2 <__bad_interrupt>
    704a:	00 00       	nop
    704c:	4a c0       	rjmp	.+148    	; 0x70e2 <__bad_interrupt>
    704e:	00 00       	nop
    7050:	48 c0       	rjmp	.+144    	; 0x70e2 <__bad_interrupt>
    7052:	00 00       	nop
    7054:	46 c0       	rjmp	.+140    	; 0x70e2 <__bad_interrupt>
    7056:	00 00       	nop
    7058:	44 c0       	rjmp	.+136    	; 0x70e2 <__bad_interrupt>
    705a:	00 00       	nop
    705c:	42 c0       	rjmp	.+132    	; 0x70e2 <__bad_interrupt>
    705e:	00 00       	nop
    7060:	40 c0       	rjmp	.+128    	; 0x70e2 <__bad_interrupt>
    7062:	00 00       	nop
    7064:	3e c0       	rjmp	.+124    	; 0x70e2 <__bad_interrupt>
    7066:	00 00       	nop
    7068:	3c c0       	rjmp	.+120    	; 0x70e2 <__bad_interrupt>
    706a:	00 00       	nop
    706c:	3a c0       	rjmp	.+116    	; 0x70e2 <__bad_interrupt>
    706e:	00 00       	nop
    7070:	38 c0       	rjmp	.+112    	; 0x70e2 <__bad_interrupt>
    7072:	00 00       	nop
    7074:	36 c0       	rjmp	.+108    	; 0x70e2 <__bad_interrupt>
    7076:	00 00       	nop
    7078:	34 c0       	rjmp	.+104    	; 0x70e2 <__bad_interrupt>
    707a:	00 00       	nop
    707c:	32 c0       	rjmp	.+100    	; 0x70e2 <__bad_interrupt>
    707e:	00 00       	nop
    7080:	30 c0       	rjmp	.+96     	; 0x70e2 <__bad_interrupt>
    7082:	00 00       	nop
    7084:	2e c0       	rjmp	.+92     	; 0x70e2 <__bad_interrupt>
    7086:	00 00       	nop
    7088:	2c c0       	rjmp	.+88     	; 0x70e2 <__bad_interrupt>
    708a:	00 00       	nop
    708c:	2a c0       	rjmp	.+84     	; 0x70e2 <__bad_interrupt>
    708e:	00 00       	nop
    7090:	28 c0       	rjmp	.+80     	; 0x70e2 <__bad_interrupt>
    7092:	00 00       	nop
    7094:	26 c0       	rjmp	.+76     	; 0x70e2 <__bad_interrupt>
    7096:	00 00       	nop
    7098:	24 c0       	rjmp	.+72     	; 0x70e2 <__bad_interrupt>
    709a:	00 00       	nop
    709c:	22 c0       	rjmp	.+68     	; 0x70e2 <__bad_interrupt>
    709e:	00 00       	nop
    70a0:	20 c0       	rjmp	.+64     	; 0x70e2 <__bad_interrupt>
    70a2:	00 00       	nop
    70a4:	1e c0       	rjmp	.+60     	; 0x70e2 <__bad_interrupt>
    70a6:	00 00       	nop
    70a8:	1c c0       	rjmp	.+56     	; 0x70e2 <__bad_interrupt>
    70aa:	00 00       	nop

000070ac <__ctors_end>:
    70ac:	11 24       	eor	r1, r1
    70ae:	1f be       	out	0x3f, r1	; 63
    70b0:	cf ef       	ldi	r28, 0xFF	; 255
    70b2:	da e0       	ldi	r29, 0x0A	; 10
    70b4:	de bf       	out	0x3e, r29	; 62
    70b6:	cd bf       	out	0x3d, r28	; 61

000070b8 <__do_copy_data>:
    70b8:	11 e0       	ldi	r17, 0x01	; 1
    70ba:	a0 e0       	ldi	r26, 0x00	; 0
    70bc:	b1 e0       	ldi	r27, 0x01	; 1
    70be:	ee e0       	ldi	r30, 0x0E	; 14
    70c0:	ff e7       	ldi	r31, 0x7F	; 127
    70c2:	02 c0       	rjmp	.+4      	; 0x70c8 <__do_copy_data+0x10>
    70c4:	05 90       	lpm	r0, Z+
    70c6:	0d 92       	st	X+, r0
    70c8:	a4 3b       	cpi	r26, 0xB4	; 180
    70ca:	b1 07       	cpc	r27, r17
    70cc:	d9 f7       	brne	.-10     	; 0x70c4 <__do_copy_data+0xc>

000070ce <__do_clear_bss>:
    70ce:	11 e0       	ldi	r17, 0x01	; 1
    70d0:	a4 eb       	ldi	r26, 0xB4	; 180
    70d2:	b1 e0       	ldi	r27, 0x01	; 1
    70d4:	01 c0       	rjmp	.+2      	; 0x70d8 <.do_clear_bss_start>

000070d6 <.do_clear_bss_loop>:
    70d6:	1d 92       	st	X+, r1

000070d8 <.do_clear_bss_start>:
    70d8:	ad 3c       	cpi	r26, 0xCD	; 205
    70da:	b1 07       	cpc	r27, r17
    70dc:	e1 f7       	brne	.-8      	; 0x70d6 <.do_clear_bss_loop>
    70de:	32 d3       	rcall	.+1636   	; 0x7744 <main>
    70e0:	14 c7       	rjmp	.+3624   	; 0x7f0a <_exit>

000070e2 <__bad_interrupt>:
    70e2:	8e cf       	rjmp	.-228    	; 0x7000 <__vectors>

000070e4 <FetchNextCommandByte>:
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    70e4:	84 e0       	ldi	r24, 0x04	; 4
    70e6:	80 93 e9 00 	sts	0x00E9, r24
    70ea:	0d c0       	rjmp	.+26     	; 0x7106 <FetchNextCommandByte+0x22>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    70ec:	80 91 e8 00 	lds	r24, 0x00E8
    70f0:	8b 77       	andi	r24, 0x7B	; 123
    70f2:	80 93 e8 00 	sts	0x00E8, r24
    70f6:	03 c0       	rjmp	.+6      	; 0x70fe <FetchNextCommandByte+0x1a>
	{
		Endpoint_ClearOUT();

		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    70f8:	8e b3       	in	r24, 0x1e	; 30
    70fa:	88 23       	and	r24, r24
    70fc:	59 f0       	breq	.+22     	; 0x7114 <FetchNextCommandByte+0x30>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    70fe:	80 91 e8 00 	lds	r24, 0x00E8
	/* If OUT endpoint empty, clear it and wait for the next packet from the host */
	while (!(Endpoint_IsReadWriteAllowed()))
	{
		Endpoint_ClearOUT();

		while (!(Endpoint_IsOUTReceived()))
    7102:	82 ff       	sbrs	r24, 2
    7104:	f9 cf       	rjmp	.-14     	; 0x70f8 <FetchNextCommandByte+0x14>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    7106:	80 91 e8 00 	lds	r24, 0x00E8
{
	/* Select the OUT endpoint so that the next data byte can be read */
	Endpoint_SelectEndpoint(CDC_RX_EPNUM);

	/* If OUT endpoint empty, clear it and wait for the next packet from the host */
	while (!(Endpoint_IsReadWriteAllowed()))
    710a:	85 ff       	sbrs	r24, 5
    710c:	ef cf       	rjmp	.-34     	; 0x70ec <FetchNextCommandByte+0x8>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    710e:	80 91 f1 00 	lds	r24, 0x00F1
			  return 0;
		}
	}

	/* Fetch the next byte from the OUT endpoint */
	return Endpoint_Read_8();
    7112:	08 95       	ret
		Endpoint_ClearOUT();

		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
			  return 0;
    7114:	80 e0       	ldi	r24, 0x00	; 0
		}
	}

	/* Fetch the next byte from the OUT endpoint */
	return Endpoint_Read_8();
}
    7116:	08 95       	ret

00007118 <WriteNextResponseByte>:
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    7118:	93 e0       	ldi	r25, 0x03	; 3
    711a:	90 93 e9 00 	sts	0x00E9, r25
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    711e:	90 91 e8 00 	lds	r25, 0x00E8
{
	/* Select the IN endpoint so that the next data byte can be written */
	Endpoint_SelectEndpoint(CDC_TX_EPNUM);

	/* If IN endpoint full, clear it and wait until ready for the next packet to the host */
	if (!(Endpoint_IsReadWriteAllowed()))
    7122:	95 fd       	sbrc	r25, 5
    7124:	0d c0       	rjmp	.+26     	; 0x7140 <WriteNextResponseByte+0x28>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    7126:	90 91 e8 00 	lds	r25, 0x00E8
    712a:	9e 77       	andi	r25, 0x7E	; 126
    712c:	90 93 e8 00 	sts	0x00E8, r25
    7130:	03 c0       	rjmp	.+6      	; 0x7138 <WriteNextResponseByte+0x20>
	{
		Endpoint_ClearIN();

		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    7132:	9e b3       	in	r25, 0x1e	; 30
    7134:	99 23       	and	r25, r25
    7136:	69 f0       	breq	.+26     	; 0x7152 <WriteNextResponseByte+0x3a>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    7138:	90 91 e8 00 	lds	r25, 0x00E8
	/* If IN endpoint full, clear it and wait until ready for the next packet to the host */
	if (!(Endpoint_IsReadWriteAllowed()))
	{
		Endpoint_ClearIN();

		while (!(Endpoint_IsINReady()))
    713c:	90 ff       	sbrs	r25, 0
    713e:	f9 cf       	rjmp	.-14     	; 0x7132 <WriteNextResponseByte+0x1a>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    7140:	80 93 f1 00 	sts	0x00F1, r24
	}

	/* Write the next byte to the IN endpoint */
	Endpoint_Write_8(Response);
	
	TX_LED_ON();
    7144:	5d 98       	cbi	0x0b, 5	; 11
	TxLEDPulse = TX_RX_LED_PULSE_PERIOD;
    7146:	84 e6       	ldi	r24, 0x64	; 100
    7148:	90 e0       	ldi	r25, 0x00	; 0
    714a:	90 93 bb 01 	sts	0x01BB, r25
    714e:	80 93 ba 01 	sts	0x01BA, r24
    7152:	08 95       	ret

00007154 <StartSketch>:
uint8_t bootKey = 0x77;
volatile uint8_t *const bootKeyPtr = (volatile uint8_t *)0x0800;

void StartSketch(void)
{
	cli();
    7154:	f8 94       	cli
	
	/* Undo TIMER1 setup and clear the count before running the sketch */
	TIMSK1 = 0;
    7156:	10 92 6f 00 	sts	0x006F, r1
	TCCR1B = 0;
    715a:	10 92 81 00 	sts	0x0081, r1
	//   not enough that it really matters.
	//TCNT1H = 0;		// 16-bit write to TCNT1 requires high byte be written first
	//TCNT1L = 0;
	
	/* Relocate the interrupt vector table to the application section */
	MCUCR = (1 << IVCE);
    715e:	81 e0       	ldi	r24, 0x01	; 1
    7160:	85 bf       	out	0x35, r24	; 53
	MCUCR = 0;
    7162:	15 be       	out	0x35, r1	; 53

	L_LED_OFF();
    7164:	47 98       	cbi	0x08, 7	; 8
	TX_LED_OFF();
    7166:	5d 9a       	sbi	0x0b, 5	; 11
	RX_LED_OFF();
    7168:	28 9a       	sbi	0x05, 0	; 5

	/* jump to beginning of application space */
	__asm__ volatile("jmp 0x0000");
    716a:	0c 94 00 00 	jmp	0	; 0x0 <__heap_end>
	
}
    716e:	08 95       	ret

00007170 <__vector_17>:

}
*/
//uint16_t ctr = 0;
ISR(TIMER1_COMPA_vect, ISR_BLOCK)
{
    7170:	1f 92       	push	r1
    7172:	0f 92       	push	r0
    7174:	0f b6       	in	r0, 0x3f	; 63
    7176:	0f 92       	push	r0
    7178:	11 24       	eor	r1, r1
    717a:	2f 93       	push	r18
    717c:	8f 93       	push	r24
    717e:	9f 93       	push	r25
    7180:	ef 93       	push	r30
    7182:	ff 93       	push	r31
	/* Reset counter */
	TCNT1H = 0;
    7184:	10 92 85 00 	sts	0x0085, r1
	TCNT1L = 0;
    7188:	10 92 84 00 	sts	0x0084, r1

	/* Check whether the TX or RX LED one-shot period has elapsed.  if so, turn off the LED */
	if (TxLEDPulse && !(--TxLEDPulse))
    718c:	80 91 ba 01 	lds	r24, 0x01BA
    7190:	90 91 bb 01 	lds	r25, 0x01BB
    7194:	00 97       	sbiw	r24, 0x00	; 0
    7196:	41 f0       	breq	.+16     	; 0x71a8 <__vector_17+0x38>
    7198:	01 97       	sbiw	r24, 0x01	; 1
    719a:	90 93 bb 01 	sts	0x01BB, r25
    719e:	80 93 ba 01 	sts	0x01BA, r24
    71a2:	00 97       	sbiw	r24, 0x00	; 0
    71a4:	09 f4       	brne	.+2      	; 0x71a8 <__vector_17+0x38>
		TX_LED_OFF();
    71a6:	5d 9a       	sbi	0x0b, 5	; 11
	if (RxLEDPulse && !(--RxLEDPulse))
    71a8:	80 91 b8 01 	lds	r24, 0x01B8
    71ac:	90 91 b9 01 	lds	r25, 0x01B9
    71b0:	00 97       	sbiw	r24, 0x00	; 0
    71b2:	41 f0       	breq	.+16     	; 0x71c4 <__vector_17+0x54>
    71b4:	01 97       	sbiw	r24, 0x01	; 1
    71b6:	90 93 b9 01 	sts	0x01B9, r25
    71ba:	80 93 b8 01 	sts	0x01B8, r24
    71be:	00 97       	sbiw	r24, 0x00	; 0
    71c0:	09 f4       	brne	.+2      	; 0x71c4 <__vector_17+0x54>
		RX_LED_OFF();
    71c2:	28 9a       	sbi	0x05, 0	; 5
		
	resetTimeout++;
    71c4:	80 91 b4 01 	lds	r24, 0x01B4
    71c8:	90 91 b5 01 	lds	r25, 0x01B5
    71cc:	01 96       	adiw	r24, 0x01	; 1
    71ce:	90 93 b5 01 	sts	0x01B5, r25
    71d2:	80 93 b4 01 	sts	0x01B4, r24
	if (pgm_read_word(0) != 0xFFFF)
    71d6:	e0 e0       	ldi	r30, 0x00	; 0
    71d8:	f0 e0       	ldi	r31, 0x00	; 0
    71da:	85 91       	lpm	r24, Z+
    71dc:	94 91       	lpm	r25, Z
    71de:	2f ef       	ldi	r18, 0xFF	; 255
    71e0:	8f 3f       	cpi	r24, 0xFF	; 255
    71e2:	92 07       	cpc	r25, r18
    71e4:	49 f0       	breq	.+18     	; 0x71f8 <__vector_17+0x88>
		Timeout++;
    71e6:	80 91 b6 01 	lds	r24, 0x01B6
    71ea:	90 91 b7 01 	lds	r25, 0x01B7
    71ee:	01 96       	adiw	r24, 0x01	; 1
    71f0:	90 93 b7 01 	sts	0x01B7, r25
    71f4:	80 93 b6 01 	sts	0x01B6, r24
}
    71f8:	ff 91       	pop	r31
    71fa:	ef 91       	pop	r30
    71fc:	9f 91       	pop	r25
    71fe:	8f 91       	pop	r24
    7200:	2f 91       	pop	r18
    7202:	0f 90       	pop	r0
    7204:	0f be       	out	0x3f, r0	; 63
    7206:	0f 90       	pop	r0
    7208:	1f 90       	pop	r1
    720a:	18 95       	reti

0000720c <EVENT_USB_Device_ConfigurationChanged>:
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
    720c:	82 e0       	ldi	r24, 0x02	; 2
    720e:	61 ec       	ldi	r22, 0xC1	; 193
    7210:	42 e0       	ldi	r20, 0x02	; 2
    7212:	66 d3       	rcall	.+1740   	; 0x78e0 <Endpoint_ConfigureEndpoint_Prv>
    7214:	83 e0       	ldi	r24, 0x03	; 3
    7216:	61 e8       	ldi	r22, 0x81	; 129
    7218:	42 e1       	ldi	r20, 0x12	; 18
    721a:	62 d3       	rcall	.+1732   	; 0x78e0 <Endpoint_ConfigureEndpoint_Prv>
    721c:	84 e0       	ldi	r24, 0x04	; 4
    721e:	60 e8       	ldi	r22, 0x80	; 128
    7220:	42 e1       	ldi	r20, 0x12	; 18
    7222:	5e c3       	rjmp	.+1724   	; 0x78e0 <Endpoint_ConfigureEndpoint_Prv>

00007224 <EVENT_USB_Device_ControlRequest>:
    7224:	80 91 c5 01 	lds	r24, 0x01C5
    7228:	98 2f       	mov	r25, r24
	                           ENDPOINT_BANK_SINGLE);

	Endpoint_ConfigureEndpoint(CDC_RX_EPNUM, EP_TYPE_BULK,
	                           ENDPOINT_DIR_OUT, CDC_TXRX_EPSIZE,
	                           ENDPOINT_BANK_SINGLE);
}
    722a:	9f 77       	andi	r25, 0x7F	; 127
 *  internally.
 */
void EVENT_USB_Device_ControlRequest(void)
{
	/* Ignore any requests that aren't directed to the CDC interface */
	if ((USB_ControlRequest.bmRequestType & (CONTROL_REQTYPE_TYPE | CONTROL_REQTYPE_RECIPIENT)) !=
    722c:	91 32       	cpi	r25, 0x21	; 33
    722e:	49 f5       	brne	.+82     	; 0x7282 <EVENT_USB_Device_ControlRequest+0x5e>
	{
		return;
	}

	/* Process CDC specific control requests */
	switch (USB_ControlRequest.bRequest)
    7230:	90 91 c6 01 	lds	r25, 0x01C6
    7234:	90 32       	cpi	r25, 0x20	; 32
    7236:	a1 f0       	breq	.+40     	; 0x7260 <EVENT_USB_Device_ControlRequest+0x3c>
    7238:	91 32       	cpi	r25, 0x21	; 33
    723a:	19 f5       	brne	.+70     	; 0x7282 <EVENT_USB_Device_ControlRequest+0x5e>
	{
		case CDC_REQ_GetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    723c:	81 3a       	cpi	r24, 0xA1	; 161
    723e:	09 f5       	brne	.+66     	; 0x7282 <EVENT_USB_Device_ControlRequest+0x5e>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    7240:	80 91 e8 00 	lds	r24, 0x00E8
    7244:	87 7f       	andi	r24, 0xF7	; 247
    7246:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();

				/* Write the line coding data to the control endpoint */
				Endpoint_Write_Control_Stream_LE(&LineEncoding, sizeof(CDC_LineEncoding_t));
    724a:	8d e0       	ldi	r24, 0x0D	; 13
    724c:	91 e0       	ldi	r25, 0x01	; 1
    724e:	67 e0       	ldi	r22, 0x07	; 7
    7250:	70 e0       	ldi	r23, 0x00	; 0
    7252:	7c d4       	rcall	.+2296   	; 0x7b4c <Endpoint_Write_Control_Stream_LE>
    7254:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    7258:	8b 77       	andi	r24, 0x7B	; 123
    725a:	80 93 e8 00 	sts	0x00E8, r24
    725e:	08 95       	ret
    7260:	81 32       	cpi	r24, 0x21	; 33
				Endpoint_ClearOUT();
			}

			break;
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    7262:	79 f4       	brne	.+30     	; 0x7282 <EVENT_USB_Device_ControlRequest+0x5e>
    7264:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    7268:	87 7f       	andi	r24, 0xF7	; 247
    726a:	80 93 e8 00 	sts	0x00E8, r24
    726e:	8d e0       	ldi	r24, 0x0D	; 13
			{
				Endpoint_ClearSETUP();

				/* Read the line coding data in from the host into the global struct */
				Endpoint_Read_Control_Stream_LE(&LineEncoding, sizeof(CDC_LineEncoding_t));
    7270:	91 e0       	ldi	r25, 0x01	; 1
    7272:	67 e0       	ldi	r22, 0x07	; 7
    7274:	70 e0       	ldi	r23, 0x00	; 0
    7276:	c9 d4       	rcall	.+2450   	; 0x7c0a <Endpoint_Read_Control_Stream_LE>
    7278:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    727c:	8e 77       	andi	r24, 0x7E	; 126
    727e:	80 93 e8 00 	sts	0x00E8, r24
    7282:	08 95       	ret

00007284 <CDC_Task>:
    7284:	4f 92       	push	r4
    7286:	5f 92       	push	r5

/** Task to read in AVR910 commands from the CDC data OUT endpoint, process them, perform the required actions
 *  and send the appropriate response back to the host.
 */
void CDC_Task(void)
{
    7288:	6f 92       	push	r6
    728a:	7f 92       	push	r7
    728c:	8f 92       	push	r8
    728e:	9f 92       	push	r9
    7290:	af 92       	push	r10
    7292:	bf 92       	push	r11
    7294:	cf 92       	push	r12
    7296:	df 92       	push	r13
    7298:	ef 92       	push	r14
    729a:	ff 92       	push	r15
    729c:	0f 93       	push	r16
    729e:	1f 93       	push	r17
    72a0:	cf 93       	push	r28
    72a2:	df 93       	push	r29
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    72a4:	84 e0       	ldi	r24, 0x04	; 4
    72a6:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    72aa:	80 91 e8 00 	lds	r24, 0x00E8
	/* Select the OUT endpoint */
	Endpoint_SelectEndpoint(CDC_RX_EPNUM);

	/* Check if endpoint has a command in it sent from the host */
	if (!(Endpoint_IsOUTReceived()))
    72ae:	82 ff       	sbrs	r24, 2
    72b0:	38 c2       	rjmp	.+1136   	; 0x7722 <CDC_Task+0x49e>
	  return;
	  
	RX_LED_ON();
    72b2:	28 98       	cbi	0x05, 0	; 5
	RxLEDPulse = TX_RX_LED_PULSE_PERIOD;
    72b4:	84 e6       	ldi	r24, 0x64	; 100
    72b6:	90 e0       	ldi	r25, 0x00	; 0
    72b8:	90 93 b9 01 	sts	0x01B9, r25
    72bc:	80 93 b8 01 	sts	0x01B8, r24

	/* Read in the bootloader command (first byte sent from host) */
	uint8_t Command = FetchNextCommandByte();
    72c0:	11 df       	rcall	.-478    	; 0x70e4 <FetchNextCommandByte>
    72c2:	c8 2f       	mov	r28, r24
    72c4:	85 34       	cpi	r24, 0x45	; 69

	if (Command == 'E')
    72c6:	81 f4       	brne	.+32     	; 0x72e8 <CDC_Task+0x64>
    72c8:	8c e4       	ldi	r24, 0x4C	; 76
	{
		/* We nearly run out the bootloader timeout clock, 
		* leaving just a few hundred milliseconds so the 
		* bootloder has time to respond and service any 
		* subsequent requests */
		Timeout = TIMEOUT_PERIOD - 500;
    72ca:	9d e1       	ldi	r25, 0x1D	; 29
    72cc:	90 93 b7 01 	sts	0x01B7, r25
    72d0:	80 93 b6 01 	sts	0x01B6, r24
    72d4:	07 b6       	in	r0, 0x37	; 55
	
		/* Re-enable RWW section - must be done here in case 
		 * user has disabled verification on upload.  */
		boot_rww_enable_safe();		
    72d6:	00 fc       	sbrc	r0, 0
    72d8:	fd cf       	rjmp	.-6      	; 0x72d4 <CDC_Task+0x50>
    72da:	f9 99       	sbic	0x1f, 1	; 31
    72dc:	fe cf       	rjmp	.-4      	; 0x72da <CDC_Task+0x56>
    72de:	81 e1       	ldi	r24, 0x11	; 17
    72e0:	80 93 57 00 	sts	0x0057, r24
    72e4:	e8 95       	spm
    72e6:	03 c0       	rjmp	.+6      	; 0x72ee <CDC_Task+0x6a>
    72e8:	84 35       	cpi	r24, 0x54	; 84

		// Send confirmation byte back to the host 
		WriteNextResponseByte('\r');
	}
	else if (Command == 'T')
    72ea:	19 f4       	brne	.+6      	; 0x72f2 <CDC_Task+0x6e>
    72ec:	fb de       	rcall	.-522    	; 0x70e4 <FetchNextCommandByte>
	{
		FetchNextCommandByte();
    72ee:	8d e0       	ldi	r24, 0x0D	; 13
    72f0:	ee c1       	rjmp	.+988    	; 0x76ce <CDC_Task+0x44a>

		// Send confirmation byte back to the host 
		WriteNextResponseByte('\r');
    72f2:	8c 34       	cpi	r24, 0x4C	; 76
    72f4:	e1 f3       	breq	.-8      	; 0x72ee <CDC_Task+0x6a>
	}
	else if ((Command == 'L') || (Command == 'P'))
    72f6:	80 35       	cpi	r24, 0x50	; 80
    72f8:	d1 f3       	breq	.-12     	; 0x72ee <CDC_Task+0x6a>
    72fa:	84 37       	cpi	r24, 0x74	; 116
    72fc:	21 f4       	brne	.+8      	; 0x7306 <CDC_Task+0x82>
	{
		// Send confirmation byte back to the host 
		WriteNextResponseByte('\r');
	}
	else if (Command == 't')
    72fe:	84 e4       	ldi	r24, 0x44	; 68
    7300:	0b df       	rcall	.-490    	; 0x7118 <WriteNextResponseByte>
	{
		// Return ATMEGA128 part code - this is only to allow AVRProg to use the bootloader 
		WriteNextResponseByte(0x44);
    7302:	80 e0       	ldi	r24, 0x00	; 0
    7304:	e4 c1       	rjmp	.+968    	; 0x76ce <CDC_Task+0x44a>
    7306:	81 36       	cpi	r24, 0x61	; 97
		WriteNextResponseByte(0x00);
    7308:	11 f4       	brne	.+4      	; 0x730e <CDC_Task+0x8a>
    730a:	89 e5       	ldi	r24, 0x59	; 89
	}
	else if (Command == 'a')
    730c:	e0 c1       	rjmp	.+960    	; 0x76ce <CDC_Task+0x44a>
    730e:	81 34       	cpi	r24, 0x41	; 65
	{
		// Indicate auto-address increment is supported 
		WriteNextResponseByte('Y');
    7310:	01 f5       	brne	.+64     	; 0x7352 <CDC_Task+0xce>
    7312:	e8 de       	rcall	.-560    	; 0x70e4 <FetchNextCommandByte>
	}
	else if (Command == 'A')
    7314:	c8 2f       	mov	r28, r24
    7316:	e6 de       	rcall	.-564    	; 0x70e4 <FetchNextCommandByte>
	{
		// Set the current address to that given by the host 
		CurrAddress   = (FetchNextCommandByte() << 9);
    7318:	48 2f       	mov	r20, r24
    731a:	50 e0       	ldi	r21, 0x00	; 0
    731c:	44 0f       	add	r20, r20
		CurrAddress  |= (FetchNextCommandByte() << 1);
    731e:	55 1f       	adc	r21, r21
    7320:	66 27       	eor	r22, r22
    7322:	57 fd       	sbrc	r21, 7
    7324:	60 95       	com	r22
    7326:	76 2f       	mov	r23, r22
    7328:	3c 2f       	mov	r19, r28
    732a:	33 0f       	add	r19, r19
    732c:	20 e0       	ldi	r18, 0x00	; 0
    732e:	c9 01       	movw	r24, r18
    7330:	aa 27       	eor	r26, r26
		WriteNextResponseByte('Y');
	}
	else if (Command == 'A')
	{
		// Set the current address to that given by the host 
		CurrAddress   = (FetchNextCommandByte() << 9);
    7332:	97 fd       	sbrc	r25, 7
    7334:	a0 95       	com	r26
    7336:	ba 2f       	mov	r27, r26
    7338:	48 2b       	or	r20, r24
    733a:	59 2b       	or	r21, r25
    733c:	6a 2b       	or	r22, r26
    733e:	7b 2b       	or	r23, r27
    7340:	40 93 bd 01 	sts	0x01BD, r20
		CurrAddress  |= (FetchNextCommandByte() << 1);
    7344:	50 93 be 01 	sts	0x01BE, r21
    7348:	60 93 bf 01 	sts	0x01BF, r22
    734c:	70 93 c0 01 	sts	0x01C0, r23
    7350:	ce cf       	rjmp	.-100    	; 0x72ee <CDC_Task+0x6a>
    7352:	80 37       	cpi	r24, 0x70	; 112
    7354:	11 f4       	brne	.+4      	; 0x735a <CDC_Task+0xd6>
    7356:	83 e5       	ldi	r24, 0x53	; 83
    7358:	ba c1       	rjmp	.+884    	; 0x76ce <CDC_Task+0x44a>
    735a:	83 35       	cpi	r24, 0x53	; 83

		// Send confirmation byte back to the host 
		WriteNextResponseByte('\r');
	}
	else if (Command == 'p')
    735c:	41 f4       	brne	.+16     	; 0x736e <CDC_Task+0xea>
    735e:	c0 e0       	ldi	r28, 0x00	; 0
	{
		// Indicate serial programmer back to the host 
		WriteNextResponseByte('S');
    7360:	d1 e0       	ldi	r29, 0x01	; 1
    7362:	07 e0       	ldi	r16, 0x07	; 7
	}
	else if (Command == 'S')
    7364:	89 91       	ld	r24, Y+
    7366:	d8 de       	rcall	.-592    	; 0x7118 <WriteNextResponseByte>
    7368:	01 50       	subi	r16, 0x01	; 1
    736a:	e1 f7       	brne	.-8      	; 0x7364 <CDC_Task+0xe0>
    736c:	b1 c1       	rjmp	.+866    	; 0x76d0 <CDC_Task+0x44c>
	{
		// Write the 7-byte software identifier to the endpoint 
		for (uint8_t CurrByte = 0; CurrByte < 7; CurrByte++)
		  WriteNextResponseByte(SOFTWARE_IDENTIFIER[CurrByte]);
    736e:	86 35       	cpi	r24, 0x56	; 86
    7370:	21 f4       	brne	.+8      	; 0x737a <CDC_Task+0xf6>
    7372:	81 e3       	ldi	r24, 0x31	; 49
    7374:	d1 de       	rcall	.-606    	; 0x7118 <WriteNextResponseByte>
		WriteNextResponseByte('S');
	}
	else if (Command == 'S')
	{
		// Write the 7-byte software identifier to the endpoint 
		for (uint8_t CurrByte = 0; CurrByte < 7; CurrByte++)
    7376:	80 e3       	ldi	r24, 0x30	; 48
    7378:	aa c1       	rjmp	.+852    	; 0x76ce <CDC_Task+0x44a>
		  WriteNextResponseByte(SOFTWARE_IDENTIFIER[CurrByte]);
	}
	else if (Command == 'V')
    737a:	83 37       	cpi	r24, 0x73	; 115
    737c:	31 f4       	brne	.+12     	; 0x738a <CDC_Task+0x106>
	{
		WriteNextResponseByte('0' + BOOTLOADER_VERSION_MAJOR);
    737e:	87 e8       	ldi	r24, 0x87	; 135
    7380:	cb de       	rcall	.-618    	; 0x7118 <WriteNextResponseByte>
    7382:	85 e9       	ldi	r24, 0x95	; 149
		WriteNextResponseByte('0' + BOOTLOADER_VERSION_MINOR);
    7384:	c9 de       	rcall	.-622    	; 0x7118 <WriteNextResponseByte>
    7386:	8e e1       	ldi	r24, 0x1E	; 30
	}
	else if (Command == 's')
    7388:	a2 c1       	rjmp	.+836    	; 0x76ce <CDC_Task+0x44a>
    738a:	85 36       	cpi	r24, 0x65	; 101
	{
		WriteNextResponseByte(AVR_SIGNATURE_3);
    738c:	b9 f4       	brne	.+46     	; 0x73bc <CDC_Task+0x138>
    738e:	e0 e0       	ldi	r30, 0x00	; 0
    7390:	f0 e0       	ldi	r31, 0x00	; 0
		WriteNextResponseByte(AVR_SIGNATURE_2);
    7392:	93 e0       	ldi	r25, 0x03	; 3
    7394:	85 e0       	ldi	r24, 0x05	; 5
    7396:	90 93 57 00 	sts	0x0057, r25
		WriteNextResponseByte(AVR_SIGNATURE_1);
    739a:	e8 95       	spm
	}
	else if (Command == 'e')
    739c:	07 b6       	in	r0, 0x37	; 55
    739e:	00 fc       	sbrc	r0, 0
    73a0:	fd cf       	rjmp	.-6      	; 0x739c <CDC_Task+0x118>
    73a2:	80 93 57 00 	sts	0x0057, r24
		// Clear the application section of flash 
		for (uint32_t CurrFlashAddress = 0; CurrFlashAddress < BOOT_START_ADDR; CurrFlashAddress += SPM_PAGESIZE)
		{
			boot_page_erase(CurrFlashAddress);
			boot_spm_busy_wait();
			boot_page_write(CurrFlashAddress);
    73a6:	e8 95       	spm
	else if (Command == 'e')
	{
		// Clear the application section of flash 
		for (uint32_t CurrFlashAddress = 0; CurrFlashAddress < BOOT_START_ADDR; CurrFlashAddress += SPM_PAGESIZE)
		{
			boot_page_erase(CurrFlashAddress);
    73a8:	07 b6       	in	r0, 0x37	; 55
    73aa:	00 fc       	sbrc	r0, 0
    73ac:	fd cf       	rjmp	.-6      	; 0x73a8 <CDC_Task+0x124>
			boot_spm_busy_wait();
    73ae:	e0 58       	subi	r30, 0x80	; 128
    73b0:	ff 4f       	sbci	r31, 0xFF	; 255
    73b2:	20 e7       	ldi	r18, 0x70	; 112
			boot_page_write(CurrFlashAddress);
    73b4:	e0 30       	cpi	r30, 0x00	; 0
    73b6:	f2 07       	cpc	r31, r18
    73b8:	71 f7       	brne	.-36     	; 0x7396 <CDC_Task+0x112>
			boot_spm_busy_wait();
    73ba:	99 cf       	rjmp	.-206    	; 0x72ee <CDC_Task+0x6a>
    73bc:	82 37       	cpi	r24, 0x72	; 114
    73be:	19 f4       	brne	.+6      	; 0x73c6 <CDC_Task+0x142>
    73c0:	e1 e0       	ldi	r30, 0x01	; 1
    73c2:	f0 e0       	ldi	r31, 0x00	; 0
		WriteNextResponseByte(AVR_SIGNATURE_1);
	}
	else if (Command == 'e')
	{
		// Clear the application section of flash 
		for (uint32_t CurrFlashAddress = 0; CurrFlashAddress < BOOT_START_ADDR; CurrFlashAddress += SPM_PAGESIZE)
    73c4:	0e c0       	rjmp	.+28     	; 0x73e2 <CDC_Task+0x15e>
    73c6:	86 34       	cpi	r24, 0x46	; 70
    73c8:	19 f4       	brne	.+6      	; 0x73d0 <CDC_Task+0x14c>
    73ca:	e0 e0       	ldi	r30, 0x00	; 0
    73cc:	f0 e0       	ldi	r31, 0x00	; 0

		// Send confirmation byte back to the host 
		WriteNextResponseByte('\r');
	}
	#endif
	else if (Command == 'r')
    73ce:	09 c0       	rjmp	.+18     	; 0x73e2 <CDC_Task+0x15e>
    73d0:	8e 34       	cpi	r24, 0x4E	; 78
	{
		WriteNextResponseByte(boot_lock_fuse_bits_get(GET_LOCK_BITS));
    73d2:	19 f4       	brne	.+6      	; 0x73da <CDC_Task+0x156>
    73d4:	e3 e0       	ldi	r30, 0x03	; 3
    73d6:	f0 e0       	ldi	r31, 0x00	; 0
	}
	else if (Command == 'F')
    73d8:	04 c0       	rjmp	.+8      	; 0x73e2 <CDC_Task+0x15e>
    73da:	81 35       	cpi	r24, 0x51	; 81
	{
		WriteNextResponseByte(boot_lock_fuse_bits_get(GET_LOW_FUSE_BITS));
    73dc:	39 f4       	brne	.+14     	; 0x73ec <CDC_Task+0x168>
    73de:	e2 e0       	ldi	r30, 0x02	; 2
    73e0:	f0 e0       	ldi	r31, 0x00	; 0
	}
	else if (Command == 'N')
    73e2:	89 e0       	ldi	r24, 0x09	; 9
    73e4:	80 93 57 00 	sts	0x0057, r24
	{
		WriteNextResponseByte(boot_lock_fuse_bits_get(GET_HIGH_FUSE_BITS));
    73e8:	84 91       	lpm	r24, Z
    73ea:	71 c1       	rjmp	.+738    	; 0x76ce <CDC_Task+0x44a>
	}
	else if (Command == 'Q')
    73ec:	82 36       	cpi	r24, 0x62	; 98
    73ee:	31 f4       	brne	.+12     	; 0x73fc <CDC_Task+0x178>
	{
		WriteNextResponseByte(boot_lock_fuse_bits_get(GET_EXTENDED_FUSE_BITS));
    73f0:	89 e5       	ldi	r24, 0x59	; 89
    73f2:	92 de       	rcall	.-732    	; 0x7118 <WriteNextResponseByte>
    73f4:	80 e0       	ldi	r24, 0x00	; 0
    73f6:	90 de       	rcall	.-736    	; 0x7118 <WriteNextResponseByte>
    73f8:	80 e8       	ldi	r24, 0x80	; 128
    73fa:	69 c1       	rjmp	.+722    	; 0x76ce <CDC_Task+0x44a>
    73fc:	82 34       	cpi	r24, 0x42	; 66
	}
	#if !defined(NO_BLOCK_SUPPORT)
	else if (Command == 'b')
    73fe:	19 f0       	breq	.+6      	; 0x7406 <CDC_Task+0x182>
    7400:	87 36       	cpi	r24, 0x67	; 103
	{
		WriteNextResponseByte('Y');
    7402:	09 f0       	breq	.+2      	; 0x7406 <CDC_Task+0x182>
    7404:	da c0       	rjmp	.+436    	; 0x75ba <CDC_Task+0x336>
    7406:	10 92 b7 01 	sts	0x01B7, r1

		// Send block size to the host 
		WriteNextResponseByte(SPM_PAGESIZE >> 8);
    740a:	10 92 b6 01 	sts	0x01B6, r1
		WriteNextResponseByte(SPM_PAGESIZE & 0xFF);
    740e:	6a de       	rcall	.-812    	; 0x70e4 <FetchNextCommandByte>
    7410:	c8 2e       	mov	r12, r24
	}
	else if ((Command == 'B') || (Command == 'g'))
    7412:	68 de       	rcall	.-816    	; 0x70e4 <FetchNextCommandByte>
    7414:	08 2f       	mov	r16, r24
    7416:	66 de       	rcall	.-820    	; 0x70e4 <FetchNextCommandByte>
    7418:	d8 2f       	mov	r29, r24
    741a:	85 54       	subi	r24, 0x45	; 69
	{
		// Keep resetting the timeout counter if we're receiving self-programming instructions
		Timeout = 0;
    741c:	82 30       	cpi	r24, 0x02	; 2
    741e:	08 f0       	brcs	.+2      	; 0x7422 <CDC_Task+0x19e>
    7420:	55 c1       	rjmp	.+682    	; 0x76cc <CDC_Task+0x448>
    7422:	3c 2d       	mov	r19, r12
	char     MemoryType;

	bool     HighByte = false;
	uint8_t  LowByte  = 0;

	BlockSize  = (FetchNextCommandByte() << 8);
    7424:	20 e0       	ldi	r18, 0x00	; 0
    7426:	10 e0       	ldi	r17, 0x00	; 0
    7428:	02 2b       	or	r16, r18
	BlockSize |=  FetchNextCommandByte();
    742a:	13 2b       	or	r17, r19
    742c:	10 92 6f 00 	sts	0x006F, r1

	MemoryType =  FetchNextCommandByte();
    7430:	c7 36       	cpi	r28, 0x67	; 103
    7432:	09 f0       	breq	.+2      	; 0x7436 <CDC_Task+0x1b2>
    7434:	45 c0       	rjmp	.+138    	; 0x74c0 <CDC_Task+0x23c>

	if ((MemoryType != 'E') && (MemoryType != 'F'))
    7436:	81 e1       	ldi	r24, 0x11	; 17
    7438:	80 93 57 00 	sts	0x0057, r24
    743c:	e8 95       	spm
	char     MemoryType;

	bool     HighByte = false;
	uint8_t  LowByte  = 0;

	BlockSize  = (FetchNextCommandByte() << 8);
    743e:	c0 e0       	ldi	r28, 0x00	; 0
    7440:	bb 24       	eor	r11, r11
	BlockSize |=  FetchNextCommandByte();
    7442:	b3 94       	inc	r11
    7444:	38 c0       	rjmp	.+112    	; 0x74b6 <CDC_Task+0x232>
    7446:	c0 90 bd 01 	lds	r12, 0x01BD
		return;
	}

	/* Disable timer 1 interrupt - can't afford to process nonessential interrupts
	 * while doing SPM tasks */
	TIMSK1 = 0;
    744a:	d0 90 be 01 	lds	r13, 0x01BE

	/* Check if command is to read memory */
	if (Command == 'g')
    744e:	e0 90 bf 01 	lds	r14, 0x01BF
	{		
		/* Re-enable RWW section */
		boot_rww_enable();
    7452:	f0 90 c0 01 	lds	r15, 0x01C0
    7456:	d6 34       	cpi	r29, 0x46	; 70
    7458:	b9 f4       	brne	.+46     	; 0x7488 <CDC_Task+0x204>
static void ReadWriteMemoryBlock(const uint8_t Command)
{
	uint16_t BlockSize;
	char     MemoryType;

	bool     HighByte = false;
    745a:	ec 2f       	mov	r30, r28

				/* If both bytes in current word have been read, increment the address counter */
				if (HighByte)
				  CurrAddress += 2;

				HighByte = !HighByte;
    745c:	f0 e0       	ldi	r31, 0x00	; 0
    745e:	ec 29       	or	r30, r12
    7460:	fd 29       	or	r31, r13
    7462:	84 91       	lpm	r24, Z
    7464:	59 de       	rcall	.-846    	; 0x7118 <WriteNextResponseByte>
    7466:	cc 23       	and	r28, r28
    7468:	69 f0       	breq	.+26     	; 0x7484 <CDC_Task+0x200>
    746a:	d7 01       	movw	r26, r14
    746c:	c6 01       	movw	r24, r12
    746e:	02 96       	adiw	r24, 0x02	; 2
    7470:	a1 1d       	adc	r26, r1
		/* Re-enable RWW section */
		boot_rww_enable();

		while (BlockSize--)
		{
			if (MemoryType == 'F')
    7472:	b1 1d       	adc	r27, r1
    7474:	80 93 bd 01 	sts	0x01BD, r24
			{
				/* Read the next FLASH byte from the current FLASH page */
				#if (FLASHEND > 0xFFFF)
				WriteNextResponseByte(pgm_read_byte_far(CurrAddress | HighByte));
				#else
				WriteNextResponseByte(pgm_read_byte(CurrAddress | HighByte));
    7478:	90 93 be 01 	sts	0x01BE, r25
    747c:	a0 93 bf 01 	sts	0x01BF, r26
    7480:	b0 93 c0 01 	sts	0x01C0, r27
				#endif

				/* If both bytes in current word have been read, increment the address counter */
				if (HighByte)
    7484:	cb 25       	eor	r28, r11
    7486:	15 c0       	rjmp	.+42     	; 0x74b2 <CDC_Task+0x22e>
				  CurrAddress += 2;
    7488:	d7 01       	movw	r26, r14
    748a:	c6 01       	movw	r24, r12
    748c:	b6 95       	lsr	r27
    748e:	a7 95       	ror	r26
    7490:	97 95       	ror	r25
    7492:	87 95       	ror	r24
    7494:	24 d5       	rcall	.+2632   	; 0x7ede <__eerd_byte_m32u4>
    7496:	40 de       	rcall	.-896    	; 0x7118 <WriteNextResponseByte>
    7498:	d7 01       	movw	r26, r14
    749a:	c6 01       	movw	r24, r12
    749c:	02 96       	adiw	r24, 0x02	; 2
    749e:	a1 1d       	adc	r26, r1
    74a0:	b1 1d       	adc	r27, r1

				HighByte = !HighByte;
    74a2:	80 93 bd 01 	sts	0x01BD, r24
			}
			else
			{
				/* Read the next EEPROM byte into the endpoint */
				WriteNextResponseByte(eeprom_read_byte((uint8_t*)(intptr_t)(CurrAddress >> 1)));
    74a6:	90 93 be 01 	sts	0x01BE, r25
    74aa:	a0 93 bf 01 	sts	0x01BF, r26
    74ae:	b0 93 c0 01 	sts	0x01C0, r27
    74b2:	01 50       	subi	r16, 0x01	; 1
    74b4:	10 40       	sbci	r17, 0x00	; 0
    74b6:	01 15       	cp	r16, r1
    74b8:	11 05       	cpc	r17, r1

				/* Increment the address counter after use */
				CurrAddress += 2;
    74ba:	09 f0       	breq	.+2      	; 0x74be <CDC_Task+0x23a>
    74bc:	c4 cf       	rjmp	.-120    	; 0x7446 <CDC_Task+0x1c2>
    74be:	79 c0       	rjmp	.+242    	; 0x75b2 <CDC_Task+0x32e>
    74c0:	40 90 bd 01 	lds	r4, 0x01BD
    74c4:	50 90 be 01 	lds	r5, 0x01BE
    74c8:	60 90 bf 01 	lds	r6, 0x01BF
    74cc:	70 90 c0 01 	lds	r7, 0x01C0
    74d0:	d6 34       	cpi	r29, 0x46	; 70
    74d2:	09 f0       	breq	.+2      	; 0x74d6 <CDC_Task+0x252>
    74d4:	5a c0       	rjmp	.+180    	; 0x758a <CDC_Task+0x306>
    74d6:	83 e0       	ldi	r24, 0x03	; 3
	if (Command == 'g')
	{		
		/* Re-enable RWW section */
		boot_rww_enable();

		while (BlockSize--)
    74d8:	f2 01       	movw	r30, r4
    74da:	80 93 57 00 	sts	0x0057, r24
    74de:	e8 95       	spm
    74e0:	07 b6       	in	r0, 0x37	; 55
			}
		}
	}
	else
	{
		uint32_t PageStartAddress = CurrAddress;
    74e2:	00 fc       	sbrc	r0, 0
    74e4:	fd cf       	rjmp	.-6      	; 0x74e0 <CDC_Task+0x25c>
    74e6:	51 c0       	rjmp	.+162    	; 0x758a <CDC_Task+0x306>
    74e8:	d6 34       	cpi	r29, 0x46	; 70
    74ea:	49 f5       	brne	.+82     	; 0x753e <CDC_Task+0x2ba>
    74ec:	cc 23       	and	r28, r28
    74ee:	19 f1       	breq	.+70     	; 0x7536 <CDC_Task+0x2b2>
    74f0:	c0 90 bd 01 	lds	r12, 0x01BD

		if (MemoryType == 'F')
    74f4:	d0 90 be 01 	lds	r13, 0x01BE
		{
			boot_page_erase(PageStartAddress);
    74f8:	e0 90 bf 01 	lds	r14, 0x01BF
    74fc:	f0 90 c0 01 	lds	r15, 0x01C0
    7500:	f1 dd       	rcall	.-1054   	; 0x70e4 <FetchNextCommandByte>
			boot_spm_busy_wait();
    7502:	98 2e       	mov	r9, r24
    7504:	88 24       	eor	r8, r8
    7506:	8b 2d       	mov	r24, r11
    7508:	90 e0       	ldi	r25, 0x00	; 0
		}

		while (BlockSize--)
		{
			if (MemoryType == 'F')
    750a:	88 29       	or	r24, r8
    750c:	99 29       	or	r25, r9
			{
				/* If both bytes in current word have been written, increment the address counter */
				if (HighByte)
    750e:	f6 01       	movw	r30, r12
    7510:	0c 01       	movw	r0, r24
				{
					/* Write the next FLASH word to the current FLASH page */
					boot_page_fill(CurrAddress, ((FetchNextCommandByte() << 8) | LowByte));
    7512:	a0 92 57 00 	sts	0x0057, r10
    7516:	e8 95       	spm
    7518:	11 24       	eor	r1, r1
    751a:	d7 01       	movw	r26, r14
    751c:	c6 01       	movw	r24, r12
    751e:	02 96       	adiw	r24, 0x02	; 2
    7520:	a1 1d       	adc	r26, r1
    7522:	b1 1d       	adc	r27, r1
    7524:	80 93 bd 01 	sts	0x01BD, r24
    7528:	90 93 be 01 	sts	0x01BE, r25
    752c:	a0 93 bf 01 	sts	0x01BF, r26
    7530:	b0 93 c0 01 	sts	0x01C0, r27
    7534:	02 c0       	rjmp	.+4      	; 0x753a <CDC_Task+0x2b6>
    7536:	d6 dd       	rcall	.-1108   	; 0x70e4 <FetchNextCommandByte>
    7538:	b8 2e       	mov	r11, r24
    753a:	ca 25       	eor	r28, r10
    753c:	23 c0       	rjmp	.+70     	; 0x7584 <CDC_Task+0x300>

					/* Increment the address counter after use */
					CurrAddress += 2;
    753e:	c0 90 bd 01 	lds	r12, 0x01BD
    7542:	d0 90 be 01 	lds	r13, 0x01BE
    7546:	e0 90 bf 01 	lds	r14, 0x01BF
    754a:	f0 90 c0 01 	lds	r15, 0x01C0
    754e:	f6 94       	lsr	r15
    7550:	e7 94       	ror	r14
    7552:	d7 94       	ror	r13
    7554:	c7 94       	ror	r12
    7556:	c6 dd       	rcall	.-1140   	; 0x70e4 <FetchNextCommandByte>
    7558:	68 2f       	mov	r22, r24
				}
				else
				{
					LowByte = FetchNextCommandByte();
    755a:	c6 01       	movw	r24, r12
    755c:	c8 d4       	rcall	.+2448   	; 0x7eee <__eewr_byte_m32u4>
    755e:	80 91 bd 01 	lds	r24, 0x01BD
				}
				
				HighByte = !HighByte;
    7562:	90 91 be 01 	lds	r25, 0x01BE
			}
			else
			{
				/* Write the next EEPROM byte from the endpoint */
				eeprom_write_byte((uint8_t*)((intptr_t)(CurrAddress >> 1)), FetchNextCommandByte());
    7566:	a0 91 bf 01 	lds	r26, 0x01BF
    756a:	b0 91 c0 01 	lds	r27, 0x01C0
    756e:	02 96       	adiw	r24, 0x02	; 2
    7570:	a1 1d       	adc	r26, r1
    7572:	b1 1d       	adc	r27, r1
    7574:	80 93 bd 01 	sts	0x01BD, r24
    7578:	90 93 be 01 	sts	0x01BE, r25
    757c:	a0 93 bf 01 	sts	0x01BF, r26
    7580:	b0 93 c0 01 	sts	0x01C0, r27
    7584:	01 50       	subi	r16, 0x01	; 1
    7586:	10 40       	sbci	r17, 0x00	; 0

				/* Increment the address counter after use */
				CurrAddress += 2;
    7588:	04 c0       	rjmp	.+8      	; 0x7592 <CDC_Task+0x30e>
    758a:	bb 24       	eor	r11, r11
    758c:	c0 e0       	ldi	r28, 0x00	; 0
    758e:	aa 24       	eor	r10, r10
    7590:	a3 94       	inc	r10
    7592:	01 15       	cp	r16, r1
    7594:	11 05       	cpc	r17, r1
    7596:	09 f0       	breq	.+2      	; 0x759a <CDC_Task+0x316>
    7598:	a7 cf       	rjmp	.-178    	; 0x74e8 <CDC_Task+0x264>
    759a:	d6 34       	cpi	r29, 0x46	; 70
    759c:	41 f4       	brne	.+16     	; 0x75ae <CDC_Task+0x32a>
    759e:	85 e0       	ldi	r24, 0x05	; 5
    75a0:	f2 01       	movw	r30, r4
    75a2:	80 93 57 00 	sts	0x0057, r24
    75a6:	e8 95       	spm
    75a8:	07 b6       	in	r0, 0x37	; 55
    75aa:	00 fc       	sbrc	r0, 0
    75ac:	fd cf       	rjmp	.-6      	; 0x75a8 <CDC_Task+0x324>
    75ae:	8d e0       	ldi	r24, 0x0D	; 13
    75b0:	b3 dd       	rcall	.-1178   	; 0x7118 <WriteNextResponseByte>
    75b2:	82 e0       	ldi	r24, 0x02	; 2
	}
	else
	{
		uint32_t PageStartAddress = CurrAddress;

		if (MemoryType == 'F')
    75b4:	80 93 6f 00 	sts	0x006F, r24
				else
				{
					LowByte = FetchNextCommandByte();
				}
				
				HighByte = !HighByte;
    75b8:	8b c0       	rjmp	.+278    	; 0x76d0 <CDC_Task+0x44c>
    75ba:	83 34       	cpi	r24, 0x43	; 67
		{
			boot_page_erase(PageStartAddress);
			boot_spm_busy_wait();
		}

		while (BlockSize--)
    75bc:	71 f4       	brne	.+28     	; 0x75da <CDC_Task+0x356>
    75be:	c0 91 bd 01 	lds	r28, 0x01BD
    75c2:	d0 91 be 01 	lds	r29, 0x01BE
				CurrAddress += 2;
			}
		}

		/* If in FLASH programming mode, commit the page after writing */
		if (MemoryType == 'F')
    75c6:	8e dd       	rcall	.-1252   	; 0x70e4 <FetchNextCommandByte>
		{
			/* Commit the flash page to memory */
			boot_page_write(PageStartAddress);
    75c8:	90 e0       	ldi	r25, 0x00	; 0
    75ca:	21 e0       	ldi	r18, 0x01	; 1
    75cc:	fe 01       	movw	r30, r28
    75ce:	0c 01       	movw	r0, r24
    75d0:	20 93 57 00 	sts	0x0057, r18

			/* Wait until write operation has completed */
			boot_spm_busy_wait();
    75d4:	e8 95       	spm
    75d6:	11 24       	eor	r1, r1
		}

		/* Send response byte back to the host */
		WriteNextResponseByte('\r');
    75d8:	8a ce       	rjmp	.-748    	; 0x72ee <CDC_Task+0x6a>
    75da:	83 36       	cpi	r24, 0x63	; 99
    75dc:	a9 f4       	brne	.+42     	; 0x7608 <CDC_Task+0x384>
	}

	/* Re-enable timer 1 interrupt disabled earlier in this routine */	
	TIMSK1 = (1 << OCIE1A);
    75de:	c0 90 bd 01 	lds	r12, 0x01BD
    75e2:	d0 90 be 01 	lds	r13, 0x01BE
		// Delegate the block write/read to a separate function for clarity 
		ReadWriteMemoryBlock(Command);
	}
	#endif
	#if !defined(NO_FLASH_BYTE_SUPPORT)
	else if (Command == 'C')
    75e6:	e0 90 bf 01 	lds	r14, 0x01BF
	{
		// Write the high byte to the current flash page
		boot_page_fill(CurrAddress, FetchNextCommandByte());
    75ea:	f0 90 c0 01 	lds	r15, 0x01C0
    75ee:	7a dd       	rcall	.-1292   	; 0x70e4 <FetchNextCommandByte>
    75f0:	f6 01       	movw	r30, r12
    75f2:	e1 60       	ori	r30, 0x01	; 1
    75f4:	90 e0       	ldi	r25, 0x00	; 0
    75f6:	21 e0       	ldi	r18, 0x01	; 1
    75f8:	0c 01       	movw	r0, r24
    75fa:	20 93 57 00 	sts	0x0057, r18
    75fe:	e8 95       	spm
    7600:	11 24       	eor	r1, r1
    7602:	d7 01       	movw	r26, r14
    7604:	c6 01       	movw	r24, r12
    7606:	34 c0       	rjmp	.+104    	; 0x7670 <CDC_Task+0x3ec>

		// Send confirmation byte back to the host 
		WriteNextResponseByte('\r');
	}
	else if (Command == 'c')
    7608:	8d 36       	cpi	r24, 0x6D	; 109
    760a:	61 f4       	brne	.+24     	; 0x7624 <CDC_Task+0x3a0>
	{
		// Write the low byte to the current flash page 
		boot_page_fill(CurrAddress | 0x01, FetchNextCommandByte());
    760c:	e0 91 bd 01 	lds	r30, 0x01BD
    7610:	f0 91 be 01 	lds	r31, 0x01BE
    7614:	85 e0       	ldi	r24, 0x05	; 5
    7616:	80 93 57 00 	sts	0x0057, r24
    761a:	e8 95       	spm
    761c:	07 b6       	in	r0, 0x37	; 55
    761e:	00 fc       	sbrc	r0, 0
    7620:	fd cf       	rjmp	.-6      	; 0x761c <CDC_Task+0x398>
    7622:	65 ce       	rjmp	.-822    	; 0x72ee <CDC_Task+0x6a>
    7624:	82 35       	cpi	r24, 0x52	; 82
    7626:	51 f4       	brne	.+20     	; 0x763c <CDC_Task+0x3b8>
    7628:	e0 91 bd 01 	lds	r30, 0x01BD
    762c:	f0 91 be 01 	lds	r31, 0x01BE
    7630:	c5 91       	lpm	r28, Z+

		// Increment the address 
		CurrAddress += 2;
    7632:	d4 91       	lpm	r29, Z
    7634:	8d 2f       	mov	r24, r29
    7636:	70 dd       	rcall	.-1312   	; 0x7118 <WriteNextResponseByte>

		// Send confirmation byte back to the host 
		WriteNextResponseByte('\r');
	}
	else if (Command == 'm')
    7638:	8c 2f       	mov	r24, r28
    763a:	49 c0       	rjmp	.+146    	; 0x76ce <CDC_Task+0x44a>
	{
		// Commit the flash page to memory
		boot_page_write(CurrAddress);
    763c:	84 34       	cpi	r24, 0x44	; 68
    763e:	21 f5       	brne	.+72     	; 0x7688 <CDC_Task+0x404>
    7640:	c0 90 bd 01 	lds	r12, 0x01BD
    7644:	d0 90 be 01 	lds	r13, 0x01BE
    7648:	e0 90 bf 01 	lds	r14, 0x01BF

		// Wait until write operation has completed 
		boot_spm_busy_wait();
    764c:	f0 90 c0 01 	lds	r15, 0x01C0
    7650:	f6 94       	lsr	r15
    7652:	e7 94       	ror	r14

		// Send confirmation byte back to the host 
		WriteNextResponseByte('\r');
	}
	else if (Command == 'R')
    7654:	d7 94       	ror	r13
    7656:	c7 94       	ror	r12
	{
		#if (FLASHEND > 0xFFFF)
		uint16_t ProgramWord = pgm_read_word_far(CurrAddress);
		#else
		uint16_t ProgramWord = pgm_read_word(CurrAddress);
    7658:	45 dd       	rcall	.-1398   	; 0x70e4 <FetchNextCommandByte>
    765a:	68 2f       	mov	r22, r24
    765c:	c6 01       	movw	r24, r12
    765e:	47 d4       	rcall	.+2190   	; 0x7eee <__eewr_byte_m32u4>
    7660:	80 91 bd 01 	lds	r24, 0x01BD
		#endif

		WriteNextResponseByte(ProgramWord >> 8);
    7664:	90 91 be 01 	lds	r25, 0x01BE
    7668:	a0 91 bf 01 	lds	r26, 0x01BF
		WriteNextResponseByte(ProgramWord & 0xFF);
    766c:	b0 91 c0 01 	lds	r27, 0x01C0
	}
	#endif
	#if !defined(NO_EEPROM_BYTE_SUPPORT)
	else if (Command == 'D')
    7670:	02 96       	adiw	r24, 0x02	; 2
	{
		// Read the byte from the endpoint and write it to the EEPROM 
		eeprom_write_byte((uint8_t*)((intptr_t)(CurrAddress >> 1)), FetchNextCommandByte());
    7672:	a1 1d       	adc	r26, r1
    7674:	b1 1d       	adc	r27, r1
    7676:	80 93 bd 01 	sts	0x01BD, r24
    767a:	90 93 be 01 	sts	0x01BE, r25
    767e:	a0 93 bf 01 	sts	0x01BF, r26
    7682:	b0 93 c0 01 	sts	0x01C0, r27
    7686:	33 ce       	rjmp	.-922    	; 0x72ee <CDC_Task+0x6a>
    7688:	84 36       	cpi	r24, 0x64	; 100
    768a:	f1 f4       	brne	.+60     	; 0x76c8 <CDC_Task+0x444>
    768c:	c0 90 bd 01 	lds	r12, 0x01BD
    7690:	d0 90 be 01 	lds	r13, 0x01BE
    7694:	e0 90 bf 01 	lds	r14, 0x01BF

		// Increment the address after use
		CurrAddress += 2;
    7698:	f0 90 c0 01 	lds	r15, 0x01C0
    769c:	d7 01       	movw	r26, r14
    769e:	c6 01       	movw	r24, r12
    76a0:	b6 95       	lsr	r27
    76a2:	a7 95       	ror	r26
    76a4:	97 95       	ror	r25
    76a6:	87 95       	ror	r24
    76a8:	1a d4       	rcall	.+2100   	; 0x7ede <__eerd_byte_m32u4>
    76aa:	36 dd       	rcall	.-1428   	; 0x7118 <WriteNextResponseByte>
    76ac:	d7 01       	movw	r26, r14
    76ae:	c6 01       	movw	r24, r12
    76b0:	02 96       	adiw	r24, 0x02	; 2
    76b2:	a1 1d       	adc	r26, r1
    76b4:	b1 1d       	adc	r27, r1
    76b6:	80 93 bd 01 	sts	0x01BD, r24
    76ba:	90 93 be 01 	sts	0x01BE, r25

		// Send confirmation byte back to the host 
		WriteNextResponseByte('\r');
	}
	else if (Command == 'd')
    76be:	a0 93 bf 01 	sts	0x01BF, r26
	{
		// Read the EEPROM byte and write it to the endpoint 
		WriteNextResponseByte(eeprom_read_byte((uint8_t*)((intptr_t)(CurrAddress >> 1))));
    76c2:	b0 93 c0 01 	sts	0x01C0, r27
    76c6:	04 c0       	rjmp	.+8      	; 0x76d0 <CDC_Task+0x44c>
    76c8:	8b 31       	cpi	r24, 0x1B	; 27
    76ca:	11 f0       	breq	.+4      	; 0x76d0 <CDC_Task+0x44c>
    76cc:	8f e3       	ldi	r24, 0x3F	; 63
    76ce:	24 dd       	rcall	.-1464   	; 0x7118 <WriteNextResponseByte>
    76d0:	83 e0       	ldi	r24, 0x03	; 3
    76d2:	80 93 e9 00 	sts	0x00E9, r24
    76d6:	90 91 e8 00 	lds	r25, 0x00E8
    76da:	80 91 e8 00 	lds	r24, 0x00E8
    76de:	8e 77       	andi	r24, 0x7E	; 126
    76e0:	80 93 e8 00 	sts	0x00E8, r24
    76e4:	95 ff       	sbrs	r25, 5

		// Increment the address after use 
		CurrAddress += 2;
    76e6:	04 c0       	rjmp	.+8      	; 0x76f0 <CDC_Task+0x46c>
    76e8:	10 c0       	rjmp	.+32     	; 0x770a <CDC_Task+0x486>
    76ea:	8e b3       	in	r24, 0x1e	; 30
    76ec:	88 23       	and	r24, r24
    76ee:	c9 f0       	breq	.+50     	; 0x7722 <CDC_Task+0x49e>
    76f0:	80 91 e8 00 	lds	r24, 0x00E8
    76f4:	80 ff       	sbrs	r24, 0
    76f6:	f9 cf       	rjmp	.-14     	; 0x76ea <CDC_Task+0x466>
    76f8:	80 91 e8 00 	lds	r24, 0x00E8
    76fc:	8e 77       	andi	r24, 0x7E	; 126
    76fe:	80 93 e8 00 	sts	0x00E8, r24
	}
	#endif
	else if (Command != 27)
    7702:	03 c0       	rjmp	.+6      	; 0x770a <CDC_Task+0x486>
    7704:	8e b3       	in	r24, 0x1e	; 30
	{
		// Unknown (non-sync) command, return fail code 
		WriteNextResponseByte('?');
    7706:	88 23       	and	r24, r24
    7708:	61 f0       	breq	.+24     	; 0x7722 <CDC_Task+0x49e>
    770a:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    770e:	80 ff       	sbrs	r24, 0
    7710:	f9 cf       	rjmp	.-14     	; 0x7704 <CDC_Task+0x480>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    7712:	84 e0       	ldi	r24, 0x04	; 4
    7714:	80 93 e9 00 	sts	0x00E9, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    7718:	80 91 e8 00 	lds	r24, 0x00E8
    771c:	8b 77       	andi	r24, 0x7B	; 123
    771e:	80 93 e8 00 	sts	0x00E8, r24

	/* Send the endpoint data to the host */
	Endpoint_ClearIN();

	/* If a full endpoint's worth of data was sent, we need to send an empty packet afterwards to signal end of transfer */
	if (IsEndpointFull)
    7722:	df 91       	pop	r29
    7724:	cf 91       	pop	r28
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    7726:	1f 91       	pop	r17
    7728:	0f 91       	pop	r16
    772a:	ff 90       	pop	r15
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    772c:	ef 90       	pop	r14
    772e:	df 90       	pop	r13
	Endpoint_ClearIN();

	/* If a full endpoint's worth of data was sent, we need to send an empty packet afterwards to signal end of transfer */
	if (IsEndpointFull)
	{
		while (!(Endpoint_IsINReady()))
    7730:	cf 90       	pop	r12
    7732:	bf 90       	pop	r11
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    7734:	af 90       	pop	r10
    7736:	9f 90       	pop	r9
    7738:	8f 90       	pop	r8
    773a:	7f 90       	pop	r7
    773c:	6f 90       	pop	r6
    773e:	5f 90       	pop	r5
	}

	/* Wait until the data has been sent to the host */
	while (!(Endpoint_IsINReady()))
	{
		if (USB_DeviceState == DEVICE_STATE_Unattached)
    7740:	4f 90       	pop	r4
    7742:	08 95       	ret

00007744 <main>:
    7744:	cf 93       	push	r28
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    7746:	20 91 00 08 	lds	r18, 0x0800

		Endpoint_ClearIN();
	}

	/* Wait until the data has been sent to the host */
	while (!(Endpoint_IsINReady()))
    774a:	10 92 00 08 	sts	0x0800, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    774e:	44 b7       	in	r20, 0x34	; 52
    7750:	14 be       	out	0x34, r1	; 52
    7752:	88 e1       	ldi	r24, 0x18	; 24
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    7754:	0f b6       	in	r0, 0x3f	; 63
    7756:	f8 94       	cli
    7758:	80 93 60 00 	sts	0x0060, r24
    775c:	10 92 60 00 	sts	0x0060, r1
	/* Select the OUT endpoint */
	Endpoint_SelectEndpoint(CDC_RX_EPNUM);

	/* Acknowledge the command from the host */
	Endpoint_ClearOUT();
}
    7760:	0f be       	out	0x3f, r0	; 63
    7762:	90 e8       	ldi	r25, 0x80	; 128
    7764:	80 e0       	ldi	r24, 0x00	; 0
    7766:	0f b6       	in	r0, 0x3f	; 63
    7768:	f8 94       	cli
    776a:	90 93 61 00 	sts	0x0061, r25
    776e:	80 93 61 00 	sts	0x0061, r24
    7772:	0f be       	out	0x3f, r0	; 63
    7774:	31 e0       	ldi	r19, 0x01	; 1
    7776:	35 bf       	out	0x35, r19	; 53
    7778:	82 e0       	ldi	r24, 0x02	; 2
    777a:	85 bf       	out	0x35, r24	; 53
    777c:	3f 9a       	sbi	0x07, 7	; 7
    777e:	20 9a       	sbi	0x04, 0	; 4

	// Relocate the interrupt vector table to the bootloader section
	MCUCR = (1 << IVCE);
	MCUCR = (1 << IVSEL);
	
	LED_SETUP();
    7780:	55 9a       	sbi	0x0a, 5	; 10
	CPU_PRESCALE(0); 
    7782:	90 93 61 00 	sts	0x0061, r25
    7786:	10 92 61 00 	sts	0x0061, r1
	L_LED_OFF();
    778a:	47 98       	cbi	0x08, 7	; 8
	TX_LED_OFF();
    778c:	5d 9a       	sbi	0x0b, 5	; 11
	RX_LED_OFF();
    778e:	28 9a       	sbi	0x05, 0	; 5
	// With 16 MHz clock and 1/64 prescaler, timer 1 is clocked at 250 kHz
	// Our chosen compare match generates an interrupt every 1 ms.
	// This interrupt is disabled selectively when doing memory reading, erasing,
	// or writing since SPM has tight timing requirements. 

	OCR1AH = 0;
    7790:	10 92 89 00 	sts	0x0089, r1
	OCR1AL = 250;
    7794:	9a ef       	ldi	r25, 0xFA	; 250
    7796:	90 93 88 00 	sts	0x0088, r25
	TIMSK1 = (1 << OCIE1A);					// enable timer 1 output compare A match interrupt
    779a:	80 93 6f 00 	sts	0x006F, r24
	TCCR1B = ((1 << CS11) | (1 << CS10));	// 1/64 prescaler on timer 1 input
    779e:	83 e0       	ldi	r24, 0x03	; 3
    77a0:	80 93 81 00 	sts	0x0081, r24
	
	
	// MAH 8/15/12- this replaces bulky pgm_read_word(0) calls later on, to save memory.
	if (pgm_read_word(0) != 0xFFFF) sketchPresent = true;
    77a4:	e0 e0       	ldi	r30, 0x00	; 0
    77a6:	f0 e0       	ldi	r31, 0x00	; 0
    77a8:	85 91       	lpm	r24, Z+
    77aa:	94 91       	lpm	r25, Z
    77ac:	5f ef       	ldi	r21, 0xFF	; 255
    77ae:	8f 3f       	cpi	r24, 0xFF	; 255
    77b0:	95 07       	cpc	r25, r21
    77b2:	11 f0       	breq	.+4      	; 0x77b8 <main+0x74>
    77b4:	30 93 bc 01 	sts	0x01BC, r19
	//  and all comments throughout are from me.
	// First case: external reset, bootKey NOT in memory. We'll put the bootKey in memory, then spin
	//  our wheels for about 750ms, then proceed to the sketch, if there is one. If, during that 750ms,
	//  another external reset occurs, on the next pass through this decision tree, execution will fall
	//  through to the bootloader.
	if ( (mcusr_state & (1<<EXTRF)) && (bootKeyPtrVal != bootKey) ) {
    77b8:	41 ff       	sbrs	r20, 1
    77ba:	1c c0       	rjmp	.+56     	; 0x77f4 <main+0xb0>
    77bc:	80 91 0b 01 	lds	r24, 0x010B
    77c0:	28 17       	cp	r18, r24
    77c2:	c1 f0       	breq	.+48     	; 0x77f4 <main+0xb0>
		*bootKeyPtr = bootKey;
    77c4:	80 93 00 08 	sts	0x0800, r24
		sei();
    77c8:	78 94       	sei
    77ca:	80 91 0c 01 	lds	r24, 0x010C
		while (RunBootloader) 
    77ce:	88 23       	and	r24, r24
    77d0:	41 f0       	breq	.+16     	; 0x77e2 <main+0x9e>
		{
			if (resetTimeout > EXT_RESET_TIMEOUT_PERIOD)
    77d2:	80 91 b4 01 	lds	r24, 0x01B4
    77d6:	90 91 b5 01 	lds	r25, 0x01B5
    77da:	22 e0       	ldi	r18, 0x02	; 2
    77dc:	8f 3e       	cpi	r24, 0xEF	; 239
    77de:	92 07       	cpc	r25, r18
    77e0:	c0 f3       	brcs	.-16     	; 0x77d2 <main+0x8e>
	//  another external reset occurs, on the next pass through this decision tree, execution will fall
	//  through to the bootloader.
	if ( (mcusr_state & (1<<EXTRF)) && (bootKeyPtrVal != bootKey) ) {
		*bootKeyPtr = bootKey;
		sei();
		while (RunBootloader) 
    77e2:	10 92 0c 01 	sts	0x010C, r1
		{
			if (resetTimeout > EXT_RESET_TIMEOUT_PERIOD)
				RunBootloader = false;
		}
		cli();
    77e6:	f8 94       	cli
		*bootKeyPtr = 0;
    77e8:	10 92 00 08 	sts	0x0800, r1
		RunBootloader = true;
    77ec:	81 e0       	ldi	r24, 0x01	; 1
    77ee:	80 93 0c 01 	sts	0x010C, r24
    77f2:	0c c0       	rjmp	.+24     	; 0x780c <main+0xc8>
		if (sketchPresent) StartSketch();
	} 
	// On a power-on reset, we ALWAYS want to go to the sketch. If there is one.
	else if ( (mcusr_state & (1<<PORF)) && sketchPresent) {	
    77f4:	40 ff       	sbrs	r20, 0
    77f6:	04 c0       	rjmp	.+8      	; 0x7800 <main+0xbc>
    77f8:	80 91 bc 01 	lds	r24, 0x01BC
    77fc:	88 23       	and	r24, r24
    77fe:	51 f4       	brne	.+20     	; 0x7814 <main+0xd0>
		StartSketch();
	} 
	// On a watchdog reset, if the bootKey isn't set, and there's a sketch, we should just
	//  go straight to the sketch.
	else if ( (mcusr_state & (1<<WDRF) ) && (bootKeyPtrVal != bootKey) && sketchPresent) {	
    7800:	43 ff       	sbrs	r20, 3
    7802:	09 c0       	rjmp	.+18     	; 0x7816 <main+0xd2>
    7804:	80 91 0b 01 	lds	r24, 0x010B
    7808:	28 17       	cp	r18, r24
    780a:	29 f0       	breq	.+10     	; 0x7816 <main+0xd2>
    780c:	80 91 bc 01 	lds	r24, 0x01BC
    7810:	88 23       	and	r24, r24
    7812:	09 f0       	breq	.+2      	; 0x7816 <main+0xd2>
		// If it looks like an "accidental" watchdog reset then start the sketch.
		StartSketch();
    7814:	9f dc       	rcall	.-1730   	; 0x7154 <StartSketch>
    7816:	d1 d0       	rcall	.+418    	; 0x79ba <USB_Init>
	}
	
	// END ALL COMMENTS ON THIS SECTION FROM MAH.
	
	/* Initialize USB Subsystem */
	USB_Init();
    7818:	78 94       	sei
    781a:	10 92 b7 01 	sts	0x01B7, r1

	/* Enable global interrupts so that the USB stack can function */
	sei();
	
	Timeout = 0;
    781e:	10 92 b6 01 	sts	0x01B6, r1
    7822:	ce ef       	ldi	r28, 0xFE	; 254
    7824:	21 c0       	rjmp	.+66     	; 0x7868 <main+0x124>
			
		// MAH 8/15/12- This used to be a function call- inlining it saves a few bytes.
		LLEDPulse++;
		uint8_t p = LLEDPulse >> 8;
		if (p > 127)
			p = 254-p;
    7826:	2e dd       	rcall	.-1444   	; 0x7284 <CDC_Task>
	/* Enable global interrupts so that the USB stack can function */
	sei();
	
	Timeout = 0;
	
	while (RunBootloader)
    7828:	48 d3       	rcall	.+1680   	; 0x7eba <USB_USBTask>
	{
		CDC_Task();
    782a:	80 91 b6 01 	lds	r24, 0x01B6
		USB_USBTask();
    782e:	90 91 b7 01 	lds	r25, 0x01B7
		/* Time out and start the sketch if one is present */
		if (Timeout > TIMEOUT_PERIOD)
    7832:	3f e1       	ldi	r19, 0x1F	; 31
    7834:	81 34       	cpi	r24, 0x41	; 65
    7836:	93 07       	cpc	r25, r19
    7838:	10 f0       	brcs	.+4      	; 0x783e <main+0xfa>
    783a:	10 92 0c 01 	sts	0x010C, r1
    783e:	80 91 c1 01 	lds	r24, 0x01C1
			RunBootloader = false;
    7842:	90 91 c2 01 	lds	r25, 0x01C2
			
		// MAH 8/15/12- This used to be a function call- inlining it saves a few bytes.
		LLEDPulse++;
    7846:	01 96       	adiw	r24, 0x01	; 1
    7848:	90 93 c2 01 	sts	0x01C2, r25
    784c:	80 93 c1 01 	sts	0x01C1, r24
    7850:	29 2f       	mov	r18, r25
    7852:	97 ff       	sbrs	r25, 7
    7854:	03 c0       	rjmp	.+6      	; 0x785c <main+0x118>
    7856:	5c 2f       	mov	r21, r28
		uint8_t p = LLEDPulse >> 8;
    7858:	59 1b       	sub	r21, r25
		if (p > 127)
    785a:	25 2f       	mov	r18, r21
    785c:	22 0f       	add	r18, r18
			p = 254-p;
    785e:	28 17       	cp	r18, r24
    7860:	10 f4       	brcc	.+4      	; 0x7866 <main+0x122>
    7862:	47 98       	cbi	0x08, 7	; 8
		p += p;
    7864:	01 c0       	rjmp	.+2      	; 0x7868 <main+0x124>
		if (((uint8_t)LLEDPulse) > p)
    7866:	47 9a       	sbi	0x08, 7	; 8
    7868:	80 91 0c 01 	lds	r24, 0x010C
			L_LED_OFF();
    786c:	88 23       	and	r24, r24
		else
			L_LED_ON();
    786e:	d9 f6       	brne	.-74     	; 0x7826 <main+0xe2>
	/* Enable global interrupts so that the USB stack can function */
	sei();
	
	Timeout = 0;
	
	while (RunBootloader)
    7870:	80 91 e0 00 	lds	r24, 0x00E0
    7874:	81 60       	ori	r24, 0x01	; 1
    7876:	80 93 e0 00 	sts	0x00E0, r24
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
    787a:	6c dc       	rcall	.-1832   	; 0x7154 <StartSketch>
    787c:	80 e0       	ldi	r24, 0x00	; 0
    787e:	90 e0       	ldi	r25, 0x00	; 0
    7880:	cf 91       	pop	r28

	/* Disconnect from the host - USB interface will be reset later along with the AVR */
	USB_Detach();

	/* Jump to beginning of application space to run the sketch - do not reset */	
	StartSketch();
    7882:	08 95       	ret

00007884 <CALLBACK_USB_GetDescriptor>:
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
    7884:	92 30       	cpi	r25, 0x02	; 2
    7886:	29 f0       	breq	.+10     	; 0x7892 <CALLBACK_USB_GetDescriptor+0xe>
    7888:	93 30       	cpi	r25, 0x03	; 3
    788a:	41 f0       	breq	.+16     	; 0x789c <CALLBACK_USB_GetDescriptor+0x18>
    788c:	91 30       	cpi	r25, 0x01	; 1
    788e:	61 f4       	brne	.+24     	; 0x78a8 <CALLBACK_USB_GetDescriptor+0x24>
    7890:	10 c0       	rjmp	.+32     	; 0x78b2 <CALLBACK_USB_GetDescriptor+0x2e>
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
    7892:	8e e3       	ldi	r24, 0x3E	; 62
    7894:	90 e0       	ldi	r25, 0x00	; 0
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
    7896:	24 e6       	ldi	r18, 0x64	; 100
    7898:	31 e0       	ldi	r19, 0x01	; 1
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
    789a:	1e c0       	rjmp	.+60     	; 0x78d8 <CALLBACK_USB_GetDescriptor+0x54>
		case DTYPE_String:
			if (!(DescriptorNumber))
    789c:	88 23       	and	r24, r24
    789e:	71 f0       	breq	.+28     	; 0x78bc <CALLBACK_USB_GetDescriptor+0x38>
			{
				Address = &LanguageString;
				Size    = LanguageString.Header.Size;
			}
			else if (DescriptorNumber == DeviceDescriptor.ProductStrIndex) 
    78a0:	81 30       	cpi	r24, 0x01	; 1
    78a2:	89 f0       	breq	.+34     	; 0x78c6 <CALLBACK_USB_GetDescriptor+0x42>
			{
				Address = &ProductString;
				Size    = ProductString.Header.Size;
			} else if (DescriptorNumber == DeviceDescriptor.ManufacturerStrIndex)
    78a4:	82 30       	cpi	r24, 0x02	; 2
    78a6:	a1 f0       	breq	.+40     	; 0x78d0 <CALLBACK_USB_GetDescriptor+0x4c>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
    78a8:	80 e0       	ldi	r24, 0x00	; 0
    78aa:	90 e0       	ldi	r25, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
    78ac:	20 e0       	ldi	r18, 0x00	; 0
    78ae:	30 e0       	ldi	r19, 0x00	; 0
    78b0:	13 c0       	rjmp	.+38     	; 0x78d8 <CALLBACK_USB_GetDescriptor+0x54>

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
    78b2:	82 e1       	ldi	r24, 0x12	; 18
    78b4:	90 e0       	ldi	r25, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
    78b6:	22 ea       	ldi	r18, 0xA2	; 162
    78b8:	31 e0       	ldi	r19, 0x01	; 1
    78ba:	0e c0       	rjmp	.+28     	; 0x78d8 <CALLBACK_USB_GetDescriptor+0x54>
			break;
		case DTYPE_String:
			if (!(DescriptorNumber))
			{
				Address = &LanguageString;
				Size    = LanguageString.Header.Size;
    78bc:	84 e0       	ldi	r24, 0x04	; 4
    78be:	90 e0       	ldi	r25, 0x00	; 0
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
		case DTYPE_String:
			if (!(DescriptorNumber))
			{
				Address = &LanguageString;
    78c0:	20 e6       	ldi	r18, 0x60	; 96
    78c2:	31 e0       	ldi	r19, 0x01	; 1
    78c4:	09 c0       	rjmp	.+18     	; 0x78d8 <CALLBACK_USB_GetDescriptor+0x54>
				Size    = LanguageString.Header.Size;
			}
			else if (DescriptorNumber == DeviceDescriptor.ProductStrIndex) 
			{
				Address = &ProductString;
				Size    = ProductString.Header.Size;
    78c6:	8e e1       	ldi	r24, 0x1E	; 30
    78c8:	90 e0       	ldi	r25, 0x00	; 0
				Address = &LanguageString;
				Size    = LanguageString.Header.Size;
			}
			else if (DescriptorNumber == DeviceDescriptor.ProductStrIndex) 
			{
				Address = &ProductString;
    78ca:	20 e4       	ldi	r18, 0x40	; 64
    78cc:	31 e0       	ldi	r19, 0x01	; 1
    78ce:	04 c0       	rjmp	.+8      	; 0x78d8 <CALLBACK_USB_GetDescriptor+0x54>
				Size    = ProductString.Header.Size;
			} else if (DescriptorNumber == DeviceDescriptor.ManufacturerStrIndex)
			{
				Address = &ManufNameString;
				Size	= ManufNameString.Header.Size;
    78d0:	8a e2       	ldi	r24, 0x2A	; 42
    78d2:	90 e0       	ldi	r25, 0x00	; 0
			{
				Address = &ProductString;
				Size    = ProductString.Header.Size;
			} else if (DescriptorNumber == DeviceDescriptor.ManufacturerStrIndex)
			{
				Address = &ManufNameString;
    78d4:	24 e1       	ldi	r18, 0x14	; 20
    78d6:	31 e0       	ldi	r19, 0x01	; 1
			}

			break;
	}

	*DescriptorAddress = Address;
    78d8:	fa 01       	movw	r30, r20
    78da:	31 83       	std	Z+1, r19	; 0x01
    78dc:	20 83       	st	Z, r18
	return Size;
}
    78de:	08 95       	ret

000078e0 <Endpoint_ConfigureEndpoint_Prv>:
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    78e0:	80 93 e9 00 	sts	0x00E9, r24
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
    78e4:	eb ee       	ldi	r30, 0xEB	; 235
    78e6:	f0 e0       	ldi	r31, 0x00	; 0
    78e8:	80 81       	ld	r24, Z
    78ea:	81 60       	ori	r24, 0x01	; 1
    78ec:	80 83       	st	Z, r24
{
#if defined(CONTROL_ONLY_DEVICE) || defined(ORDERED_EP_CONFIG)
	Endpoint_SelectEndpoint(Number);
	Endpoint_EnableEndpoint();

	UECFG1X = 0;
    78ee:	ed ee       	ldi	r30, 0xED	; 237
    78f0:	f0 e0       	ldi	r31, 0x00	; 0
    78f2:	10 82       	st	Z, r1
	UECFG0X = UECFG0XData;
    78f4:	60 93 ec 00 	sts	0x00EC, r22
	UECFG1X = UECFG1XData;
    78f8:	40 83       	st	Z, r20
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
    78fa:	80 91 ee 00 	lds	r24, 0x00EE
	}
	
	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
    78fe:	88 1f       	adc	r24, r24
    7900:	88 27       	eor	r24, r24
    7902:	88 1f       	adc	r24, r24
    7904:	08 95       	ret

00007906 <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
    7906:	80 91 c5 01 	lds	r24, 0x01C5
    790a:	87 ff       	sbrs	r24, 7
    790c:	11 c0       	rjmp	.+34     	; 0x7930 <Endpoint_ClearStatusStage+0x2a>
    790e:	03 c0       	rjmp	.+6      	; 0x7916 <Endpoint_ClearStatusStage+0x10>
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    7910:	8e b3       	in	r24, 0x1e	; 30
    7912:	88 23       	and	r24, r24
    7914:	b1 f0       	breq	.+44     	; 0x7942 <Endpoint_ClearStatusStage+0x3c>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    7916:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
    791a:	82 ff       	sbrs	r24, 2
    791c:	f9 cf       	rjmp	.-14     	; 0x7910 <Endpoint_ClearStatusStage+0xa>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    791e:	80 91 e8 00 	lds	r24, 0x00E8
    7922:	8b 77       	andi	r24, 0x7B	; 123
    7924:	80 93 e8 00 	sts	0x00E8, r24
    7928:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    792a:	8e b3       	in	r24, 0x1e	; 30
    792c:	88 23       	and	r24, r24
    792e:	49 f0       	breq	.+18     	; 0x7942 <Endpoint_ClearStatusStage+0x3c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    7930:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
    7934:	80 ff       	sbrs	r24, 0
    7936:	f9 cf       	rjmp	.-14     	; 0x792a <Endpoint_ClearStatusStage+0x24>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    7938:	80 91 e8 00 	lds	r24, 0x00E8
    793c:	8e 77       	andi	r24, 0x7E	; 126
    793e:	80 93 e8 00 	sts	0x00E8, r24
    7942:	08 95       	ret

00007944 <USB_ResetInterface>:

	USB_IsInitialized = false;
}

void USB_ResetInterface(void)
{
    7944:	0f 93       	push	r16
    7946:	1f 93       	push	r17
    7948:	cf 93       	push	r28
    794a:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
    794c:	41 d0       	rcall	.+130    	; 0x79d0 <USB_INT_DisableAllInterrupts>
    794e:	48 d0       	rcall	.+144    	; 0x79e0 <USB_INT_ClearAllInterrupts>
	USB_INT_ClearAllInterrupts();
    7950:	c8 ed       	ldi	r28, 0xD8	; 216
    7952:	d0 e0       	ldi	r29, 0x00	; 0
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
    7954:	88 81       	ld	r24, Y
    7956:	8f 77       	andi	r24, 0x7F	; 127
    7958:	88 83       	st	Y, r24
    795a:	88 81       	ld	r24, Y
    795c:	80 68       	ori	r24, 0x80	; 128
				USBCON |=  (1 << USBE);
    795e:	88 83       	st	Y, r24
    7960:	88 81       	ld	r24, Y
    7962:	8f 7d       	andi	r24, 0xDF	; 223
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
    7964:	88 83       	st	Y, r24
    7966:	19 bc       	out	0x29, r1	; 41
    7968:	1e ba       	out	0x1e, r1	; 30
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    796a:	10 92 c3 01 	sts	0x01C3, r1

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
	USB_Device_ConfigurationNumber  = 0;
    796e:	00 ee       	ldi	r16, 0xE0	; 224
    7970:	10 e0       	ldi	r17, 0x00	; 0
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
    7972:	f8 01       	movw	r30, r16
    7974:	80 81       	ld	r24, Z
    7976:	8b 7f       	andi	r24, 0xFB	; 251
    7978:	80 83       	st	Z, r24
    797a:	88 81       	ld	r24, Y
    797c:	81 60       	ori	r24, 0x01	; 1
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
    797e:	88 83       	st	Y, r24
    7980:	80 e0       	ldi	r24, 0x00	; 0
    7982:	60 e0       	ldi	r22, 0x00	; 0
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
    7984:	42 e0       	ldi	r20, 0x02	; 2
    7986:	ac df       	rcall	.-168    	; 0x78e0 <Endpoint_ConfigureEndpoint_Prv>
    7988:	e1 ee       	ldi	r30, 0xE1	; 225
    798a:	f0 e0       	ldi	r31, 0x00	; 0
    798c:	80 81       	ld	r24, Z
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    798e:	8e 7f       	andi	r24, 0xFE	; 254
    7990:	80 83       	st	Z, r24
    7992:	e2 ee       	ldi	r30, 0xE2	; 226
    7994:	f0 e0       	ldi	r31, 0x00	; 0
    7996:	80 81       	ld	r24, Z
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    7998:	81 60       	ori	r24, 0x01	; 1
    799a:	80 83       	st	Z, r24
    799c:	80 81       	ld	r24, Z
    799e:	88 60       	ori	r24, 0x08	; 8
    79a0:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
    79a2:	f8 01       	movw	r30, r16
    79a4:	80 81       	ld	r24, Z
    79a6:	8e 7f       	andi	r24, 0xFE	; 254
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
    79a8:	80 83       	st	Z, r24
    79aa:	88 81       	ld	r24, Y
    79ac:	80 61       	ori	r24, 0x10	; 16
    79ae:	88 83       	st	Y, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
    79b0:	df 91       	pop	r29
    79b2:	cf 91       	pop	r28
    79b4:	1f 91       	pop	r17
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
    79b6:	0f 91       	pop	r16
    79b8:	08 95       	ret

000079ba <USB_Init>:
    79ba:	e7 ed       	ldi	r30, 0xD7	; 215
    79bc:	f0 e0       	ldi	r31, 0x00	; 0
    79be:	80 81       	ld	r24, Z

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  |=  (1 << UVREGE);
    79c0:	81 60       	ori	r24, 0x01	; 1
    79c2:	80 83       	st	Z, r24
	  USB_REG_Off();

	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		#if defined(USB_SERIES_4_AVR)
		PLLFRQ = ((1 << PLLUSB) | (1 << PDIV3) | (1 << PDIV1));
    79c4:	8a e4       	ldi	r24, 0x4A	; 74
    79c6:	82 bf       	out	0x32, r24	; 50
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
    79c8:	81 e0       	ldi	r24, 0x01	; 1
    79ca:	80 93 c4 01 	sts	0x01C4, r24

	USB_ResetInterface();
    79ce:	ba cf       	rjmp	.-140    	; 0x7944 <USB_ResetInterface>

000079d0 <USB_INT_DisableAllInterrupts>:
void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
	#elif defined(USB_SERIES_4_AVR)
	USBCON &= ~(1 << VBUSTE);
    79d0:	e8 ed       	ldi	r30, 0xD8	; 216
    79d2:	f0 e0       	ldi	r31, 0x00	; 0
    79d4:	80 81       	ld	r24, Z
    79d6:	8e 7f       	andi	r24, 0xFE	; 254
    79d8:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
    79da:	10 92 e2 00 	sts	0x00E2, r1
	#endif
}
    79de:	08 95       	ret

000079e0 <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
    79e0:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
    79e4:	10 92 e1 00 	sts	0x00E1, r1
	#endif
}
    79e8:	08 95       	ret

000079ea <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
    79ea:	1f 92       	push	r1
    79ec:	0f 92       	push	r0
    79ee:	0f b6       	in	r0, 0x3f	; 63
    79f0:	0f 92       	push	r0
    79f2:	11 24       	eor	r1, r1
    79f4:	2f 93       	push	r18
    79f6:	3f 93       	push	r19
    79f8:	4f 93       	push	r20
    79fa:	5f 93       	push	r21
    79fc:	6f 93       	push	r22
    79fe:	7f 93       	push	r23
    7a00:	8f 93       	push	r24
    7a02:	9f 93       	push	r25
    7a04:	af 93       	push	r26
    7a06:	bf 93       	push	r27
    7a08:	ef 93       	push	r30
    7a0a:	ff 93       	push	r31
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
    7a0c:	80 91 da 00 	lds	r24, 0x00DA
		EVENT_USB_Device_StartOfFrame();
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
    7a10:	80 ff       	sbrs	r24, 0
    7a12:	1b c0       	rjmp	.+54     	; 0x7a4a <__vector_10+0x60>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
    7a14:	80 91 d8 00 	lds	r24, 0x00D8
    7a18:	80 ff       	sbrs	r24, 0
    7a1a:	17 c0       	rjmp	.+46     	; 0x7a4a <__vector_10+0x60>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
    7a1c:	80 91 da 00 	lds	r24, 0x00DA
    7a20:	8e 7f       	andi	r24, 0xFE	; 254
    7a22:	80 93 da 00 	sts	0x00DA, r24
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
    7a26:	80 91 d9 00 	lds	r24, 0x00D9
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
    7a2a:	80 ff       	sbrs	r24, 0
    7a2c:	0b c0       	rjmp	.+22     	; 0x7a44 <__vector_10+0x5a>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    7a2e:	80 e1       	ldi	r24, 0x10	; 16
    7a30:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    7a32:	82 e1       	ldi	r24, 0x12	; 18
    7a34:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
    7a36:	09 b4       	in	r0, 0x29	; 41
    7a38:	00 fe       	sbrs	r0, 0
    7a3a:	fd cf       	rjmp	.-6      	; 0x7a36 <__vector_10+0x4c>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
    7a3c:	81 e0       	ldi	r24, 0x01	; 1
    7a3e:	8e bb       	out	0x1e, r24	; 30
			EVENT_USB_Device_Connect();
    7a40:	3b d2       	rcall	.+1142   	; 0x7eb8 <USB_Event_Stub>
    7a42:	03 c0       	rjmp	.+6      	; 0x7a4a <__vector_10+0x60>
    7a44:	19 bc       	out	0x29, r1	; 41
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    7a46:	1e ba       	out	0x1e, r1	; 30
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
    7a48:	37 d2       	rcall	.+1134   	; 0x7eb8 <USB_Event_Stub>
			EVENT_USB_Device_Disconnect();
    7a4a:	80 91 e1 00 	lds	r24, 0x00E1
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
    7a4e:	80 ff       	sbrs	r24, 0
    7a50:	17 c0       	rjmp	.+46     	; 0x7a80 <__vector_10+0x96>
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
    7a52:	80 91 e2 00 	lds	r24, 0x00E2
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
    7a56:	80 ff       	sbrs	r24, 0
    7a58:	13 c0       	rjmp	.+38     	; 0x7a80 <__vector_10+0x96>
    7a5a:	80 91 e2 00 	lds	r24, 0x00E2
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    7a5e:	8e 7f       	andi	r24, 0xFE	; 254
    7a60:	80 93 e2 00 	sts	0x00E2, r24
    7a64:	80 91 e2 00 	lds	r24, 0x00E2
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    7a68:	80 61       	ori	r24, 0x10	; 16
    7a6a:	80 93 e2 00 	sts	0x00E2, r24
    7a6e:	80 91 d8 00 	lds	r24, 0x00D8
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON  |=  (1 << FRZCLK);
    7a72:	80 62       	ori	r24, 0x20	; 32
    7a74:	80 93 d8 00 	sts	0x00D8, r24
    7a78:	19 bc       	out	0x29, r1	; 41
    7a7a:	85 e0       	ldi	r24, 0x05	; 5
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    7a7c:	8e bb       	out	0x1e, r24	; 30

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
    7a7e:	1c d2       	rcall	.+1080   	; 0x7eb8 <USB_Event_Stub>
    7a80:	80 91 e1 00 	lds	r24, 0x00E1
		EVENT_USB_Device_Suspend();
    7a84:	84 ff       	sbrs	r24, 4
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
    7a86:	2c c0       	rjmp	.+88     	; 0x7ae0 <__vector_10+0xf6>
    7a88:	80 91 e2 00 	lds	r24, 0x00E2
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
    7a8c:	84 ff       	sbrs	r24, 4
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
    7a8e:	28 c0       	rjmp	.+80     	; 0x7ae0 <__vector_10+0xf6>
    7a90:	80 e1       	ldi	r24, 0x10	; 16
    7a92:	89 bd       	out	0x29, r24	; 41
    7a94:	82 e1       	ldi	r24, 0x12	; 18

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    7a96:	89 bd       	out	0x29, r24	; 41
    7a98:	09 b4       	in	r0, 0x29	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    7a9a:	00 fe       	sbrs	r0, 0
    7a9c:	fd cf       	rjmp	.-6      	; 0x7a98 <__vector_10+0xae>
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    7a9e:	80 91 d8 00 	lds	r24, 0x00D8
    7aa2:	8f 7d       	andi	r24, 0xDF	; 223
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
    7aa4:	80 93 d8 00 	sts	0x00D8, r24
    7aa8:	80 91 e1 00 	lds	r24, 0x00E1
    7aac:	8f 7e       	andi	r24, 0xEF	; 239
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
    7aae:	80 93 e1 00 	sts	0x00E1, r24
    7ab2:	80 91 e2 00 	lds	r24, 0x00E2
    7ab6:	8f 7e       	andi	r24, 0xEF	; 239
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
    7ab8:	80 93 e2 00 	sts	0x00E2, r24
    7abc:	80 91 e2 00 	lds	r24, 0x00E2
    7ac0:	81 60       	ori	r24, 0x01	; 1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    7ac2:	80 93 e2 00 	sts	0x00E2, r24
    7ac6:	80 91 c3 01 	lds	r24, 0x01C3
    7aca:	88 23       	and	r24, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
    7acc:	21 f4       	brne	.+8      	; 0x7ad6 <__vector_10+0xec>
    7ace:	80 91 e3 00 	lds	r24, 0x00E3
    7ad2:	87 ff       	sbrs	r24, 7
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    7ad4:	02 c0       	rjmp	.+4      	; 0x7ada <__vector_10+0xf0>
    7ad6:	84 e0       	ldi	r24, 0x04	; 4
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    7ad8:	01 c0       	rjmp	.+2      	; 0x7adc <__vector_10+0xf2>
    7ada:	81 e0       	ldi	r24, 0x01	; 1
    7adc:	8e bb       	out	0x1e, r24	; 30
    7ade:	ec d1       	rcall	.+984    	; 0x7eb8 <USB_Event_Stub>
    7ae0:	80 91 e1 00 	lds	r24, 0x00E1

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
    7ae4:	83 ff       	sbrs	r24, 3
    7ae6:	21 c0       	rjmp	.+66     	; 0x7b2a <__vector_10+0x140>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
    7ae8:	80 91 e2 00 	lds	r24, 0x00E2
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
    7aec:	83 ff       	sbrs	r24, 3
    7aee:	1d c0       	rjmp	.+58     	; 0x7b2a <__vector_10+0x140>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
    7af0:	80 91 e1 00 	lds	r24, 0x00E1
    7af4:	87 7f       	andi	r24, 0xF7	; 247
    7af6:	80 93 e1 00 	sts	0x00E1, r24
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
    7afa:	82 e0       	ldi	r24, 0x02	; 2
    7afc:	8e bb       	out	0x1e, r24	; 30
    7afe:	10 92 c3 01 	sts	0x01C3, r1
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
    7b02:	80 91 e1 00 	lds	r24, 0x00E1
		USB_Device_ConfigurationNumber = 0;
    7b06:	8e 7f       	andi	r24, 0xFE	; 254
    7b08:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    7b0c:	80 91 e2 00 	lds	r24, 0x00E2
    7b10:	8e 7f       	andi	r24, 0xFE	; 254
    7b12:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    7b16:	80 91 e2 00 	lds	r24, 0x00E2
    7b1a:	80 61       	ori	r24, 0x10	; 16
    7b1c:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    7b20:	80 e0       	ldi	r24, 0x00	; 0
    7b22:	60 e0       	ldi	r22, 0x00	; 0
    7b24:	42 e0       	ldi	r20, 0x02	; 2
    7b26:	dc de       	rcall	.-584    	; 0x78e0 <Endpoint_ConfigureEndpoint_Prv>
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
    7b28:	c7 d1       	rcall	.+910    	; 0x7eb8 <USB_Event_Stub>
    7b2a:	ff 91       	pop	r31
    7b2c:	ef 91       	pop	r30
    7b2e:	bf 91       	pop	r27
    7b30:	af 91       	pop	r26

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
    7b32:	9f 91       	pop	r25
    7b34:	8f 91       	pop	r24
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    7b36:	7f 91       	pop	r23
    7b38:	6f 91       	pop	r22
    7b3a:	5f 91       	pop	r21
    7b3c:	4f 91       	pop	r20
    7b3e:	3f 91       	pop	r19
    7b40:	2f 91       	pop	r18
    7b42:	0f 90       	pop	r0
    7b44:	0f be       	out	0x3f, r0	; 63
    7b46:	0f 90       	pop	r0
    7b48:	1f 90       	pop	r1
    7b4a:	18 95       	reti

00007b4c <Endpoint_Write_Control_Stream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    7b4c:	40 91 cb 01 	lds	r20, 0x01CB
    7b50:	50 91 cc 01 	lds	r21, 0x01CC
    7b54:	46 17       	cp	r20, r22
    7b56:	57 07       	cpc	r21, r23
    7b58:	20 f4       	brcc	.+8      	; 0x7b62 <Endpoint_Write_Control_Stream_LE+0x16>
    7b5a:	ba 01       	movw	r22, r20
    7b5c:	fc 01       	movw	r30, r24
    7b5e:	40 e0       	ldi	r20, 0x00	; 0
    7b60:	3b c0       	rjmp	.+118    	; 0x7bd8 <Endpoint_Write_Control_Stream_LE+0x8c>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    7b62:	61 15       	cp	r22, r1
    7b64:	71 05       	cpc	r23, r1
    7b66:	d1 f7       	brne	.-12     	; 0x7b5c <Endpoint_Write_Control_Stream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    7b68:	40 91 e8 00 	lds	r20, 0x00E8
    7b6c:	4e 77       	andi	r20, 0x7E	; 126
    7b6e:	40 93 e8 00 	sts	0x00E8, r20
    7b72:	f4 cf       	rjmp	.-24     	; 0x7b5c <Endpoint_Write_Control_Stream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    7b74:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    7b76:	88 23       	and	r24, r24
    7b78:	09 f4       	brne	.+2      	; 0x7b7c <Endpoint_Write_Control_Stream_LE+0x30>
    7b7a:	43 c0       	rjmp	.+134    	; 0x7c02 <Endpoint_Write_Control_Stream_LE+0xb6>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    7b7c:	85 30       	cpi	r24, 0x05	; 5
    7b7e:	e9 f1       	breq	.+122    	; 0x7bfa <Endpoint_Write_Control_Stream_LE+0xae>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    7b80:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    7b84:	83 fd       	sbrc	r24, 3
    7b86:	3b c0       	rjmp	.+118    	; 0x7bfe <Endpoint_Write_Control_Stream_LE+0xb2>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    7b88:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    7b8c:	82 fd       	sbrc	r24, 2
    7b8e:	2f c0       	rjmp	.+94     	; 0x7bee <Endpoint_Write_Control_Stream_LE+0xa2>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    7b90:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
    7b94:	80 ff       	sbrs	r24, 0
    7b96:	20 c0       	rjmp	.+64     	; 0x7bd8 <Endpoint_Write_Control_Stream_LE+0x8c>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    7b98:	90 91 f3 00 	lds	r25, 0x00F3
    7b9c:	80 91 f2 00 	lds	r24, 0x00F2
    7ba0:	39 2f       	mov	r19, r25
    7ba2:	20 e0       	ldi	r18, 0x00	; 0
    7ba4:	90 e0       	ldi	r25, 0x00	; 0
    7ba6:	82 2b       	or	r24, r18
    7ba8:	93 2b       	or	r25, r19
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    7baa:	06 c0       	rjmp	.+12     	; 0x7bb8 <Endpoint_Write_Control_Stream_LE+0x6c>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    7bac:	41 91       	ld	r20, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    7bae:	40 93 f1 00 	sts	0x00F1, r20
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
    7bb2:	61 50       	subi	r22, 0x01	; 1
    7bb4:	70 40       	sbci	r23, 0x00	; 0
				BytesInEndpoint++;
    7bb6:	01 96       	adiw	r24, 0x01	; 1

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    7bb8:	61 15       	cp	r22, r1
    7bba:	71 05       	cpc	r23, r1
    7bbc:	19 f0       	breq	.+6      	; 0x7bc4 <Endpoint_Write_Control_Stream_LE+0x78>
    7bbe:	88 30       	cpi	r24, 0x08	; 8
    7bc0:	91 05       	cpc	r25, r1
    7bc2:	a0 f3       	brcs	.-24     	; 0x7bac <Endpoint_Write_Control_Stream_LE+0x60>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    7bc4:	41 e0       	ldi	r20, 0x01	; 1
    7bc6:	88 30       	cpi	r24, 0x08	; 8
    7bc8:	91 05       	cpc	r25, r1
    7bca:	09 f0       	breq	.+2      	; 0x7bce <Endpoint_Write_Control_Stream_LE+0x82>
    7bcc:	40 e0       	ldi	r20, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    7bce:	80 91 e8 00 	lds	r24, 0x00E8
    7bd2:	8e 77       	andi	r24, 0x7E	; 126
    7bd4:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    7bd8:	61 15       	cp	r22, r1
    7bda:	71 05       	cpc	r23, r1
    7bdc:	59 f6       	brne	.-106    	; 0x7b74 <Endpoint_Write_Control_Stream_LE+0x28>
    7bde:	44 23       	and	r20, r20
    7be0:	49 f6       	brne	.-110    	; 0x7b74 <Endpoint_Write_Control_Stream_LE+0x28>
    7be2:	05 c0       	rjmp	.+10     	; 0x7bee <Endpoint_Write_Control_Stream_LE+0xa2>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    7be4:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    7be6:	88 23       	and	r24, r24
    7be8:	61 f0       	breq	.+24     	; 0x7c02 <Endpoint_Write_Control_Stream_LE+0xb6>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    7bea:	85 30       	cpi	r24, 0x05	; 5
    7bec:	61 f0       	breq	.+24     	; 0x7c06 <Endpoint_Write_Control_Stream_LE+0xba>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    7bee:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    7bf2:	82 ff       	sbrs	r24, 2
    7bf4:	f7 cf       	rjmp	.-18     	; 0x7be4 <Endpoint_Write_Control_Stream_LE+0x98>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    7bf6:	80 e0       	ldi	r24, 0x00	; 0
    7bf8:	08 95       	ret
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    7bfa:	83 e0       	ldi	r24, 0x03	; 3
    7bfc:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    7bfe:	81 e0       	ldi	r24, 0x01	; 1
    7c00:	08 95       	ret
	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    7c02:	82 e0       	ldi	r24, 0x02	; 2
    7c04:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    7c06:	83 e0       	ldi	r24, 0x03	; 3
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    7c08:	08 95       	ret

00007c0a <Endpoint_Read_Control_Stream_LE>:
uint8_t TEMPLATE_FUNC_NAME (void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
    7c0a:	61 15       	cp	r22, r1
    7c0c:	71 05       	cpc	r23, r1
    7c0e:	29 f4       	brne	.+10     	; 0x7c1a <Endpoint_Read_Control_Stream_LE+0x10>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    7c10:	40 91 e8 00 	lds	r20, 0x00E8
    7c14:	4b 77       	andi	r20, 0x7B	; 123
    7c16:	40 93 e8 00 	sts	0x00E8, r20

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (void* const Buffer,
                            uint16_t Length)
{
    7c1a:	58 2f       	mov	r21, r24
    7c1c:	49 2f       	mov	r20, r25
    7c1e:	2a c0       	rjmp	.+84     	; 0x7c74 <Endpoint_Read_Control_Stream_LE+0x6a>
	if (!(Length))
	  Endpoint_ClearOUT();

	while (Length)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    7c20:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    7c22:	88 23       	and	r24, r24
    7c24:	d1 f1       	breq	.+116    	; 0x7c9a <Endpoint_Read_Control_Stream_LE+0x90>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    7c26:	85 30       	cpi	r24, 0x05	; 5
    7c28:	a1 f1       	breq	.+104    	; 0x7c92 <Endpoint_Read_Control_Stream_LE+0x88>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    7c2a:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    7c2e:	83 fd       	sbrc	r24, 3
    7c30:	32 c0       	rjmp	.+100    	; 0x7c96 <Endpoint_Read_Control_Stream_LE+0x8c>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    7c32:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
    7c36:	82 ff       	sbrs	r24, 2
    7c38:	f3 cf       	rjmp	.-26     	; 0x7c20 <Endpoint_Read_Control_Stream_LE+0x16>
    7c3a:	e5 2f       	mov	r30, r21
    7c3c:	f4 2f       	mov	r31, r20
    7c3e:	08 c0       	rjmp	.+16     	; 0x7c50 <Endpoint_Read_Control_Stream_LE+0x46>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    7c40:	80 91 f1 00 	lds	r24, 0x00F1
		{
			while (Length && Endpoint_BytesInEndpoint())
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    7c44:	81 93       	st	Z+, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
    7c46:	5e 2f       	mov	r21, r30
    7c48:	4f 2f       	mov	r20, r31
				Length--;
    7c4a:	61 50       	subi	r22, 0x01	; 1
    7c4c:	70 40       	sbci	r23, 0x00	; 0
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
		{
			while (Length && Endpoint_BytesInEndpoint())
    7c4e:	69 f0       	breq	.+26     	; 0x7c6a <Endpoint_Read_Control_Stream_LE+0x60>
    7c50:	5e 2f       	mov	r21, r30
    7c52:	4f 2f       	mov	r20, r31
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    7c54:	90 91 f3 00 	lds	r25, 0x00F3
    7c58:	80 91 f2 00 	lds	r24, 0x00F2
    7c5c:	39 2f       	mov	r19, r25
    7c5e:	20 e0       	ldi	r18, 0x00	; 0
    7c60:	90 e0       	ldi	r25, 0x00	; 0
    7c62:	82 2b       	or	r24, r18
    7c64:	93 2b       	or	r25, r19
    7c66:	00 97       	sbiw	r24, 0x00	; 0
    7c68:	59 f7       	brne	.-42     	; 0x7c40 <Endpoint_Read_Control_Stream_LE+0x36>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    7c6a:	80 91 e8 00 	lds	r24, 0x00E8
    7c6e:	8b 77       	andi	r24, 0x7B	; 123
    7c70:	80 93 e8 00 	sts	0x00E8, r24
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
	  Endpoint_ClearOUT();

	while (Length)
    7c74:	61 15       	cp	r22, r1
    7c76:	71 05       	cpc	r23, r1
    7c78:	99 f6       	brne	.-90     	; 0x7c20 <Endpoint_Read_Control_Stream_LE+0x16>
    7c7a:	05 c0       	rjmp	.+10     	; 0x7c86 <Endpoint_Read_Control_Stream_LE+0x7c>
		}
	}

	while (!(Endpoint_IsINReady()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    7c7c:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    7c7e:	88 23       	and	r24, r24
    7c80:	61 f0       	breq	.+24     	; 0x7c9a <Endpoint_Read_Control_Stream_LE+0x90>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    7c82:	85 30       	cpi	r24, 0x05	; 5
    7c84:	61 f0       	breq	.+24     	; 0x7c9e <Endpoint_Read_Control_Stream_LE+0x94>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    7c86:	80 91 e8 00 	lds	r24, 0x00E8

			Endpoint_ClearOUT();
		}
	}

	while (!(Endpoint_IsINReady()))
    7c8a:	80 ff       	sbrs	r24, 0
    7c8c:	f7 cf       	rjmp	.-18     	; 0x7c7c <Endpoint_Read_Control_Stream_LE+0x72>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    7c8e:	80 e0       	ldi	r24, 0x00	; 0
    7c90:	08 95       	ret
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    7c92:	83 e0       	ldi	r24, 0x03	; 3
    7c94:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    7c96:	81 e0       	ldi	r24, 0x01	; 1
    7c98:	08 95       	ret
	while (!(Endpoint_IsINReady()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    7c9a:	82 e0       	ldi	r24, 0x02	; 2
    7c9c:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    7c9e:	83 e0       	ldi	r24, 0x03	; 3
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    7ca0:	08 95       	ret

00007ca2 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    7ca2:	0f 93       	push	r16
    7ca4:	1f 93       	push	r17
    7ca6:	cf 93       	push	r28
    7ca8:	df 93       	push	r29
    7caa:	00 d0       	rcall	.+0      	; 0x7cac <USB_Device_ProcessControlRequest+0xa>
    7cac:	cd b7       	in	r28, 0x3d	; 61
    7cae:	de b7       	in	r29, 0x3e	; 62
    7cb0:	88 e0       	ldi	r24, 0x08	; 8
	USB_ControlRequest.bRequest      = Endpoint_Read_8();
	USB_ControlRequest.wValue        = Endpoint_Read_16_LE();
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;
    7cb2:	e5 ec       	ldi	r30, 0xC5	; 197
    7cb4:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    7cb6:	90 91 f1 00 	lds	r25, 0x00F1

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
    7cba:	91 93       	st	Z+, r25
    7cbc:	81 50       	subi	r24, 0x01	; 1
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    7cbe:	d9 f7       	brne	.-10     	; 0x7cb6 <USB_Device_ProcessControlRequest+0x14>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
    7cc0:	b1 da       	rcall	.-2718   	; 0x7224 <EVENT_USB_Device_ControlRequest>
    7cc2:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    7cc6:	83 ff       	sbrs	r24, 3

	if (Endpoint_IsSETUPReceived())
    7cc8:	e2 c0       	rjmp	.+452    	; 0x7e8e <USB_Device_ProcessControlRequest+0x1ec>
    7cca:	80 91 c5 01 	lds	r24, 0x01C5
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    7cce:	90 91 c6 01 	lds	r25, 0x01C6

		switch (USB_ControlRequest.bRequest)
    7cd2:	95 30       	cpi	r25, 0x05	; 5
    7cd4:	09 f4       	brne	.+2      	; 0x7cd8 <USB_Device_ProcessControlRequest+0x36>
    7cd6:	6b c0       	rjmp	.+214    	; 0x7dae <USB_Device_ProcessControlRequest+0x10c>
    7cd8:	96 30       	cpi	r25, 0x06	; 6
    7cda:	40 f4       	brcc	.+16     	; 0x7cec <USB_Device_ProcessControlRequest+0x4a>
    7cdc:	91 30       	cpi	r25, 0x01	; 1
    7cde:	61 f1       	breq	.+88     	; 0x7d38 <USB_Device_ProcessControlRequest+0x96>
    7ce0:	91 30       	cpi	r25, 0x01	; 1
    7ce2:	70 f0       	brcs	.+28     	; 0x7d00 <USB_Device_ProcessControlRequest+0x5e>
    7ce4:	93 30       	cpi	r25, 0x03	; 3
    7ce6:	09 f0       	breq	.+2      	; 0x7cea <USB_Device_ProcessControlRequest+0x48>
    7ce8:	d2 c0       	rjmp	.+420    	; 0x7e8e <USB_Device_ProcessControlRequest+0x1ec>
    7cea:	26 c0       	rjmp	.+76     	; 0x7d38 <USB_Device_ProcessControlRequest+0x96>
    7cec:	98 30       	cpi	r25, 0x08	; 8
    7cee:	09 f4       	brne	.+2      	; 0x7cf2 <USB_Device_ProcessControlRequest+0x50>
    7cf0:	a1 c0       	rjmp	.+322    	; 0x7e34 <USB_Device_ProcessControlRequest+0x192>
    7cf2:	99 30       	cpi	r25, 0x09	; 9
    7cf4:	09 f4       	brne	.+2      	; 0x7cf8 <USB_Device_ProcessControlRequest+0x56>
    7cf6:	b0 c0       	rjmp	.+352    	; 0x7e58 <USB_Device_ProcessControlRequest+0x1b6>
    7cf8:	96 30       	cpi	r25, 0x06	; 6
    7cfa:	09 f0       	breq	.+2      	; 0x7cfe <USB_Device_ProcessControlRequest+0x5c>
    7cfc:	c8 c0       	rjmp	.+400    	; 0x7e8e <USB_Device_ProcessControlRequest+0x1ec>
    7cfe:	7a c0       	rjmp	.+244    	; 0x7df4 <USB_Device_ProcessControlRequest+0x152>
    7d00:	80 38       	cpi	r24, 0x80	; 128
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    7d02:	09 f4       	brne	.+2      	; 0x7d06 <USB_Device_ProcessControlRequest+0x64>
    7d04:	c4 c0       	rjmp	.+392    	; 0x7e8e <USB_Device_ProcessControlRequest+0x1ec>
    7d06:	82 38       	cpi	r24, 0x82	; 130
    7d08:	09 f0       	breq	.+2      	; 0x7d0c <USB_Device_ProcessControlRequest+0x6a>
    7d0a:	c1 c0       	rjmp	.+386    	; 0x7e8e <USB_Device_ProcessControlRequest+0x1ec>
    7d0c:	80 91 c9 01 	lds	r24, 0x01C9
			#endif
			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    7d10:	87 70       	andi	r24, 0x07	; 7
    7d12:	80 93 e9 00 	sts	0x00E9, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    7d16:	90 91 eb 00 	lds	r25, 0x00EB
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    7d1a:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    7d1e:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    7d22:	87 7f       	andi	r24, 0xF7	; 247
    7d24:	80 93 e8 00 	sts	0x00E8, r24
    7d28:	81 e0       	ldi	r24, 0x01	; 1
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    7d2a:	95 ff       	sbrs	r25, 5
    7d2c:	80 e0       	ldi	r24, 0x00	; 0
    7d2e:	80 93 f1 00 	sts	0x00F1, r24
    7d32:	10 92 f1 00 	sts	0x00F1, r1
				UEDATX = (Data >> 8);
    7d36:	89 c0       	rjmp	.+274    	; 0x7e4a <USB_Device_ProcessControlRequest+0x1a8>
    7d38:	88 23       	and	r24, r24
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    7d3a:	19 f0       	breq	.+6      	; 0x7d42 <USB_Device_ProcessControlRequest+0xa0>
    7d3c:	82 30       	cpi	r24, 0x02	; 2
    7d3e:	09 f0       	breq	.+2      	; 0x7d42 <USB_Device_ProcessControlRequest+0xa0>
    7d40:	a6 c0       	rjmp	.+332    	; 0x7e8e <USB_Device_ProcessControlRequest+0x1ec>
    7d42:	8f 71       	andi	r24, 0x1F	; 31
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
    7d44:	82 30       	cpi	r24, 0x02	; 2
    7d46:	09 f0       	breq	.+2      	; 0x7d4a <USB_Device_ProcessControlRequest+0xa8>
    7d48:	a2 c0       	rjmp	.+324    	; 0x7e8e <USB_Device_ProcessControlRequest+0x1ec>
    7d4a:	80 91 c7 01 	lds	r24, 0x01C7

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    7d4e:	88 23       	and	r24, r24
    7d50:	41 f5       	brne	.+80     	; 0x7da2 <USB_Device_ProcessControlRequest+0x100>
    7d52:	20 91 c9 01 	lds	r18, 0x01C9
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    7d56:	27 70       	andi	r18, 0x07	; 7
    7d58:	09 f4       	brne	.+2      	; 0x7d5c <USB_Device_ProcessControlRequest+0xba>

				if (EndpointIndex == ENDPOINT_CONTROLEP)
    7d5a:	99 c0       	rjmp	.+306    	; 0x7e8e <USB_Device_ProcessControlRequest+0x1ec>
    7d5c:	20 93 e9 00 	sts	0x00E9, r18
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    7d60:	80 91 eb 00 	lds	r24, 0x00EB
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    7d64:	80 ff       	sbrs	r24, 0
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    7d66:	1d c0       	rjmp	.+58     	; 0x7da2 <USB_Device_ProcessControlRequest+0x100>
    7d68:	80 91 c6 01 	lds	r24, 0x01C6
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    7d6c:	83 30       	cpi	r24, 0x03	; 3
    7d6e:	21 f4       	brne	.+8      	; 0x7d78 <USB_Device_ProcessControlRequest+0xd6>
    7d70:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    7d74:	80 62       	ori	r24, 0x20	; 32
    7d76:	13 c0       	rjmp	.+38     	; 0x7d9e <USB_Device_ProcessControlRequest+0xfc>
    7d78:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    7d7c:	80 61       	ori	r24, 0x10	; 16
    7d7e:	80 93 eb 00 	sts	0x00EB, r24
    7d82:	81 e0       	ldi	r24, 0x01	; 1
			 *  \param[in] EndpointNumber Endpoint number whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber)
			{
				UERST = (1 << EndpointNumber);
    7d84:	90 e0       	ldi	r25, 0x00	; 0
    7d86:	02 c0       	rjmp	.+4      	; 0x7d8c <USB_Device_ProcessControlRequest+0xea>
    7d88:	88 0f       	add	r24, r24
    7d8a:	99 1f       	adc	r25, r25
    7d8c:	2a 95       	dec	r18
    7d8e:	e2 f7       	brpl	.-8      	; 0x7d88 <USB_Device_ProcessControlRequest+0xe6>
    7d90:	80 93 ea 00 	sts	0x00EA, r24
    7d94:	10 92 ea 00 	sts	0x00EA, r1
				UERST = 0;
    7d98:	80 91 eb 00 	lds	r24, 0x00EB

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    7d9c:	88 60       	ori	r24, 0x08	; 8
    7d9e:	80 93 eb 00 	sts	0x00EB, r24
    7da2:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    7da6:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    7daa:	87 7f       	andi	r24, 0xF7	; 247
    7dac:	51 c0       	rjmp	.+162    	; 0x7e50 <USB_Device_ProcessControlRequest+0x1ae>
    7dae:	88 23       	and	r24, r24
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    7db0:	09 f0       	breq	.+2      	; 0x7db4 <USB_Device_ProcessControlRequest+0x112>
    7db2:	6d c0       	rjmp	.+218    	; 0x7e8e <USB_Device_ProcessControlRequest+0x1ec>
    7db4:	10 91 c7 01 	lds	r17, 0x01C7
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t    DeviceAddress    = (USB_ControlRequest.wValue & 0x7F);
    7db8:	1f 77       	andi	r17, 0x7F	; 127
    7dba:	0f b7       	in	r16, 0x3f	; 63
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    7dbc:	f8 94       	cli
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    7dbe:	80 91 e8 00 	lds	r24, 0x00E8
    7dc2:	87 7f       	andi	r24, 0xF7	; 247
    7dc4:	80 93 e8 00 	sts	0x00E8, r24
    7dc8:	9e dd       	rcall	.-1220   	; 0x7906 <Endpoint_ClearStatusStage>
	uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
	GlobalInterruptDisable();
				
	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    7dca:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    7dce:	80 ff       	sbrs	r24, 0
    7dd0:	fc cf       	rjmp	.-8      	; 0x7dca <USB_Device_ProcessControlRequest+0x128>

	while (!(Endpoint_IsINReady()));
    7dd2:	80 91 e3 00 	lds	r24, 0x00E3
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				uint8_t Temp = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
    7dd6:	80 78       	andi	r24, 0x80	; 128
    7dd8:	81 2b       	or	r24, r17
    7dda:	80 93 e3 00 	sts	0x00E3, r24

				UDADDR = Temp;
    7dde:	80 68       	ori	r24, 0x80	; 128
    7de0:	80 93 e3 00 	sts	0x00E3, r24
				UDADDR = Temp | (1 << ADDEN);
    7de4:	11 23       	and	r17, r17
    7de6:	11 f0       	breq	.+4      	; 0x7dec <USB_Device_ProcessControlRequest+0x14a>

	USB_Device_SetDeviceAddress(DeviceAddress);
	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    7de8:	83 e0       	ldi	r24, 0x03	; 3
    7dea:	01 c0       	rjmp	.+2      	; 0x7dee <USB_Device_ProcessControlRequest+0x14c>
    7dec:	82 e0       	ldi	r24, 0x02	; 2
    7dee:	8e bb       	out	0x1e, r24	; 30
    7df0:	0f bf       	out	0x3f, r16	; 63
    7df2:	4d c0       	rjmp	.+154    	; 0x7e8e <USB_Device_ProcessControlRequest+0x1ec>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    7df4:	80 58       	subi	r24, 0x80	; 128
				  __builtin_csrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				SREG = GlobalIntState;				
				#endif
				
				GCC_MEMORY_BARRIER();
    7df6:	82 30       	cpi	r24, 0x02	; 2
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    7df8:	08 f0       	brcs	.+2      	; 0x7dfc <USB_Device_ProcessControlRequest+0x15a>
    7dfa:	49 c0       	rjmp	.+146    	; 0x7e8e <USB_Device_ProcessControlRequest+0x1ec>
    7dfc:	80 91 c7 01 	lds	r24, 0x01C7
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    7e00:	90 91 c8 01 	lds	r25, 0x01C8
    7e04:	60 91 c9 01 	lds	r22, 0x01C9
    7e08:	ae 01       	movw	r20, r28
    7e0a:	4f 5f       	subi	r20, 0xFF	; 255
    7e0c:	5f 4f       	sbci	r21, 0xFF	; 255
    7e0e:	3a dd       	rcall	.-1420   	; 0x7884 <CALLBACK_USB_GetDescriptor>
    7e10:	bc 01       	movw	r22, r24
    7e12:	00 97       	sbiw	r24, 0x00	; 0
    7e14:	09 f4       	brne	.+2      	; 0x7e18 <USB_Device_ProcessControlRequest+0x176>
    7e16:	3b c0       	rjmp	.+118    	; 0x7e8e <USB_Device_ProcessControlRequest+0x1ec>
    7e18:	80 91 e8 00 	lds	r24, 0x00E8
    7e1c:	87 7f       	andi	r24, 0xF7	; 247
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    7e1e:	80 93 e8 00 	sts	0x00E8, r24
    7e22:	89 81       	ldd	r24, Y+1	; 0x01
    7e24:	9a 81       	ldd	r25, Y+2	; 0x02
    7e26:	92 de       	rcall	.-732    	; 0x7b4c <Endpoint_Write_Control_Stream_LE>
	}

	Endpoint_ClearSETUP();

	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
    7e28:	80 91 e8 00 	lds	r24, 0x00E8
    7e2c:	8b 77       	andi	r24, 0x7B	; 123
    7e2e:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    7e32:	2d c0       	rjmp	.+90     	; 0x7e8e <USB_Device_ProcessControlRequest+0x1ec>
    7e34:	80 38       	cpi	r24, 0x80	; 128
    7e36:	59 f5       	brne	.+86     	; 0x7e8e <USB_Device_ProcessControlRequest+0x1ec>
    7e38:	80 91 e8 00 	lds	r24, 0x00E8
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    7e3c:	87 7f       	andi	r24, 0xF7	; 247
    7e3e:	80 93 e8 00 	sts	0x00E8, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    7e42:	80 91 c3 01 	lds	r24, 0x01C3
    7e46:	80 93 f1 00 	sts	0x00F1, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    7e4a:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    7e4e:	8e 77       	andi	r24, 0x7E	; 126
    7e50:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    7e54:	58 dd       	rcall	.-1360   	; 0x7906 <Endpoint_ClearStatusStage>
    7e56:	1b c0       	rjmp	.+54     	; 0x7e8e <USB_Device_ProcessControlRequest+0x1ec>
    7e58:	88 23       	and	r24, r24
    7e5a:	c9 f4       	brne	.+50     	; 0x7e8e <USB_Device_ProcessControlRequest+0x1ec>
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
    7e5c:	90 91 c7 01 	lds	r25, 0x01C7
    7e60:	92 30       	cpi	r25, 0x02	; 2
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    7e62:	a8 f4       	brcc	.+42     	; 0x7e8e <USB_Device_ProcessControlRequest+0x1ec>
    7e64:	80 91 e8 00 	lds	r24, 0x00E8
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    7e68:	87 7f       	andi	r24, 0xF7	; 247
    7e6a:	80 93 e8 00 	sts	0x00E8, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    7e6e:	90 93 c3 01 	sts	0x01C3, r25
    7e72:	49 dd       	rcall	.-1390   	; 0x7906 <Endpoint_ClearStatusStage>
    7e74:	80 91 c3 01 	lds	r24, 0x01C3
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    7e78:	88 23       	and	r24, r24
    7e7a:	21 f4       	brne	.+8      	; 0x7e84 <USB_Device_ProcessControlRequest+0x1e2>

	Endpoint_ClearStatusStage();
    7e7c:	80 91 e3 00 	lds	r24, 0x00E3

	if (USB_Device_ConfigurationNumber)
    7e80:	87 ff       	sbrs	r24, 7
    7e82:	02 c0       	rjmp	.+4      	; 0x7e88 <USB_Device_ProcessControlRequest+0x1e6>
    7e84:	84 e0       	ldi	r24, 0x04	; 4
    7e86:	01 c0       	rjmp	.+2      	; 0x7e8a <USB_Device_ProcessControlRequest+0x1e8>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    7e88:	81 e0       	ldi	r24, 0x01	; 1
    7e8a:	8e bb       	out	0x1e, r24	; 30
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    7e8c:	bf d9       	rcall	.-3202   	; 0x720c <EVENT_USB_Device_ConfigurationChanged>
    7e8e:	80 91 e8 00 	lds	r24, 0x00E8
    7e92:	83 ff       	sbrs	r24, 3
    7e94:	0a c0       	rjmp	.+20     	; 0x7eaa <USB_Device_ProcessControlRequest+0x208>
    7e96:	80 91 eb 00 	lds	r24, 0x00EB

	EVENT_USB_Device_ConfigurationChanged();
    7e9a:	80 62       	ori	r24, 0x20	; 32
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    7e9c:	80 93 eb 00 	sts	0x00EB, r24

				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    7ea0:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    7ea4:	87 7f       	andi	r24, 0xF7	; 247
    7ea6:	80 93 e8 00 	sts	0x00E8, r24
    7eaa:	0f 90       	pop	r0
    7eac:	0f 90       	pop	r0
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    7eae:	df 91       	pop	r29
    7eb0:	cf 91       	pop	r28
    7eb2:	1f 91       	pop	r17
    7eb4:	0f 91       	pop	r16
    7eb6:	08 95       	ret

00007eb8 <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
    7eb8:	08 95       	ret

00007eba <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    7eba:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState != DEVICE_STATE_Unattached)
    7ebc:	8e b3       	in	r24, 0x1e	; 30
    7ebe:	88 23       	and	r24, r24
    7ec0:	61 f0       	breq	.+24     	; 0x7eda <USB_USBTask+0x20>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
    7ec2:	c0 91 e9 00 	lds	r28, 0x00E9
    7ec6:	c7 70       	andi	r28, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    7ec8:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    7ecc:	80 91 e8 00 	lds	r24, 0x00E8
	{
		uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

		Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

		if (Endpoint_IsSETUPReceived())
    7ed0:	83 ff       	sbrs	r24, 3
    7ed2:	01 c0       	rjmp	.+2      	; 0x7ed6 <USB_USBTask+0x1c>
		  USB_Device_ProcessControlRequest();
    7ed4:	e6 de       	rcall	.-564    	; 0x7ca2 <USB_Device_ProcessControlRequest>
    7ed6:	c0 93 e9 00 	sts	0x00E9, r28
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    7eda:	cf 91       	pop	r28
		if (USB_CurrentMode == USB_MODE_Device)
		  USB_DeviceTask();
		else if (USB_CurrentMode == USB_MODE_Host)
		  USB_HostTask();
	#endif
}
    7edc:	08 95       	ret

00007ede <__eerd_byte_m32u4>:
    7ede:	f9 99       	sbic	0x1f, 1	; 31
    7ee0:	fe cf       	rjmp	.-4      	; 0x7ede <__eerd_byte_m32u4>
    7ee2:	92 bd       	out	0x22, r25	; 34
    7ee4:	81 bd       	out	0x21, r24	; 33
    7ee6:	f8 9a       	sbi	0x1f, 0	; 31
    7ee8:	99 27       	eor	r25, r25
    7eea:	80 b5       	in	r24, 0x20	; 32
    7eec:	08 95       	ret

00007eee <__eewr_byte_m32u4>:
    7eee:	26 2f       	mov	r18, r22

00007ef0 <__eewr_r18_m32u4>:
    7ef0:	f9 99       	sbic	0x1f, 1	; 31
    7ef2:	fe cf       	rjmp	.-4      	; 0x7ef0 <__eewr_r18_m32u4>
    7ef4:	1f ba       	out	0x1f, r1	; 31
    7ef6:	92 bd       	out	0x22, r25	; 34
    7ef8:	81 bd       	out	0x21, r24	; 33
    7efa:	20 bd       	out	0x20, r18	; 32
    7efc:	0f b6       	in	r0, 0x3f	; 63
    7efe:	f8 94       	cli
    7f00:	fa 9a       	sbi	0x1f, 2	; 31
    7f02:	f9 9a       	sbi	0x1f, 1	; 31
    7f04:	0f be       	out	0x3f, r0	; 63
    7f06:	01 96       	adiw	r24, 0x01	; 1
    7f08:	08 95       	ret

00007f0a <_exit>:
    7f0a:	f8 94       	cli

00007f0c <__stop_program>:
    7f0c:	ff cf       	rjmp	.-2      	; 0x7f0c <__stop_program>
